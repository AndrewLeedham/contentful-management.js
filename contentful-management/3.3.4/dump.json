[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/contentful-management.js",
    "content": "/**\n * Contentful Management API SDK. Allows you to create instances of a client\n * with access to the Contentful Content Management API.\n * @namespace contentfulManagement\n * @see ContentfulClientAPI\n */\nimport axios from 'axios'\nimport cloneDeep from 'lodash/cloneDeep'\nimport assign from 'lodash/assign'\nimport {createHttpClient} from 'contentful-sdk-core'\nimport version from '../version'\nimport createContentfulApi from './create-contentful-api'\n\n/**\n * @typedef {ContentfulManagement} ContentfulManagement\n * @property {function(params: {accessToken: string, insecure?: boolean, host?: string, hostUpload?: string, agent?: Object, headers?: Object}): ClientAPI} createClient - Create a client instance, this is the entry point to the library\n *\n * @example\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n*/\nexport function createClient (params) {\n  const defaultParameters = {\n    defaultHostname: 'api.contentful.com',\n    defaultHostnameUpload: 'upload.contentful.com'\n  }\n  const requiredHeaders = {\n    'Content-Type': 'application/vnd.contentful.management.v1+json',\n    'X-Contentful-User-Agent': 'contentful-management.js/' + version\n  }\n  params = assign(defaultParameters, cloneDeep(params))\n\n  if (!params.accessToken) {\n    throw new TypeError('Expected parameter accessToken')\n  }\n\n  params.headers = assign(params.headers || {}, requiredHeaders)\n\n  const http = createHttpClient(axios, params)\n  const api = createContentfulApi({\n    http: http\n  })\n\n  return api\n}\n",
    "static": true,
    "longname": "lib/contentful-management.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "typedef",
    "name": "ContentfulManagement",
    "memberof": "lib/contentful-management.js",
    "static": true,
    "longname": "lib/contentful-management.js~ContentfulManagement",
    "access": null,
    "description": "",
    "examples": [
      "// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})"
    ],
    "lineNumber": 26,
    "properties": [
      {
        "nullable": null,
        "types": [
          "function(params: {accessToken: string, insecure?: boolean, host?: string, hostUpload?: string, agent?: Object, headers?: Object}): ClientAPI"
        ],
        "spread": false,
        "optional": false,
        "name": "createClient",
        "description": "Create a client instance, this is the entry point to the library"
      }
    ],
    "type": {
      "types": [
        "ContentfulManagement"
      ],
      "optional": false,
      "name": "ContentfulManagement"
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "lib/create-contentful-api.js",
    "content": "import errorHandler from './error-handler'\nimport entities from './entities'\n\n/**\n * @typedef {ClientAPI} ClientAPI\n * @property {function(id: string): Promise<Space>} getSpace - Gets a space with the spcified id\n * @property {function(): Promise<SpaceCollection>} getSpaces - Gets a collection of spaces\n * @property {function(data: {name: string}): Promise<Space>} createSpace - Creates a space\n */\n\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Management API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Function} shouldLinksResolve - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\nexport default function createSpaceApi ({ http }) {\n  const {wrapSpace, wrapSpaceCollection} = entities.space\n\n  /**\n   * Gets all spaces\n   * @memberof ClientAPI   * @return {Promise<Space.SpaceCollection>} Promise for a collection of Spaces\n   * @example\n   * client.getSpaces()\n   * .then(spaces => console.log(spaces.items))\n   */\n  function getSpaces () {\n    return http.get('')\n    .then((response) => wrapSpaceCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a space\n   * @memberof ClientAPI\n   * @param {string} id - Space ID\n   * @return {Promise<Space.Space>} Promise for a Space\n   * @example\n   * client.getSpace('spaceid')\n   * .then(space => console.log(space))\n   */\n  function getSpace (id) {\n    return http.get(id)\n    .then((response) => wrapSpace(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a space\n   * @memberof ClientAPI\n   * @see {Space.Space}\n   * @param {object} data - Object representation of the Space to be created\n   * @param {string=} organizationId - Organization ID, if the associated token can manage more than one organization.\n   * @return {Promise<Space.Space>} Promise for the newly created Space\n   * @example\n   * client.createSpace({name: 'Space Name'})\n   * .then(space => console.log(space))\n   */\n  function createSpace (data, organizationId) {\n    return http.post('', data, {\n      headers: organizationId ? {'X-Contentful-Organization': organizationId} : {}\n    })\n    .then((response) => wrapSpace(http, response.data), errorHandler)\n  }\n\n  return {\n    getSpaces: getSpaces,\n    getSpace: getSpace,\n    createSpace: createSpace\n  }\n}\n",
    "static": true,
    "longname": "lib/create-contentful-api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "typedef",
    "name": "ClientAPI",
    "memberof": "lib/create-contentful-api.js",
    "static": true,
    "longname": "lib/create-contentful-api.js~ClientAPI",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function(id: string): Promise<Space>"
        ],
        "spread": false,
        "optional": false,
        "name": "getSpace",
        "description": "Gets a space with the spcified id"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<SpaceCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getSpaces",
        "description": "Gets a collection of spaces"
      },
      {
        "nullable": null,
        "types": [
          "function(data: {name: string}): Promise<Space>"
        ],
        "spread": false,
        "optional": false,
        "name": "createSpace",
        "description": "Creates a space"
      }
    ],
    "type": {
      "types": [
        "ClientAPI"
      ],
      "optional": false,
      "name": "ClientAPI"
    }
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "createSpaceApi",
    "memberof": "lib/create-contentful-api.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/create-contentful-api.js~createSpaceApi",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/create-contentful-api.js",
    "importStyle": "createSpaceApi",
    "description": "Creates API object with methods to access functionality from Contentful's\nManagement API",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Object} http - HTTP client instance"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Function} shouldLinksResolve - Link resolver preconfigured with global setting"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "API initialization params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ClientAPI"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "lib/create-space-api.js",
    "content": "import { createRequestConfig } from 'contentful-sdk-core'\nimport errorHandler from './error-handler'\nimport entities from './entities'\nimport omit from 'lodash/omit'\nimport assign from 'lodash/assign'\nimport { Promise } from 'es6-promise'\n\n/**\n * @typedef {Space} Space\n * @property {Object} sys - System metadata\n * @property {string} sys.id - Space id\n * @property {string} sys.type - Entity type\n * @property {string} name - Space name\n * @property {function(): Promise} delete - Deletes the space\n * @property {function(): Promise<Space>} update - Updates the space\n * @property {function(id: string): Promise<ContentType>} getContentType - Get a contentType by id\n * @property {function(): Promise<ContentTypeCollection>} getContentTypes - Gets a collection of contentTypes\n * @property {function(data:{name: string, fields: Array}): Promise<ContentType>} createContentType - creates a ContentType\n * @property {function(id: string, data: {name: string, fields: Array}): Promise<ContentType>} createContentTypeWithId - creates a ContentType with a specified id\n * @property {function(id: string): Promise<Entry>} getEntry - Gets an Entry with a custom id\n * @property {function(query:Object): Promise<EntryCollection>} getEntries - Gets a collection of entries\n * @property {function(contentTypeId: string, data: {fields: Object}): Promise<Entry>} createEntry - Creates an Entry\n * @property {function(contentTypeId: string, id: string, data: {fields: Object}): Promise<Entry>} createEntryWithId - Creates an Entry with a specified id\n * @property {function(id: string, query: Object): Promise<Asset>} getAsset - Gets an asset by id\n * @property {function(query: Object): Promise<AssetCollection>} getAssets - Gets a collection of assets\n * @property {function(data: {fields: Object}): Promise<Asset>} createAsset - Creates an asset\n * @property {function(id: string, data: {fields: Object}):Promise<Asset>} createAssetWithId - Creates an asset with the custom id\n * @property {function(): Promise<Locale>} getLocale - Gets a locale\n * @property {function(): Promise<LocaleCollection>} getLocales - Gets a collection of locales\n * @property {function(data:{name: string, code: string}): Promise<Locale>} createLocale - Creates a Locale\n * @property {function(id:string): Promise<webhook>} getWebhook - Gets a webhook\n * @property {function(): Promise<WebhookCollection>} getWebhooks - Gets a collection of webhooks\n * @property {function(data: Object): Promise<Webhook>} createWebhook - Creates a webhook\n * @property {function(id: string, data: Object)} createWebhookWithId - Creates a webhook with a custom id\n * @property {function(id: string): Promise<Role>} getRole - Gets a Role\n * @property {function(): Promise<RoleCollection>} getRoles - Gets a collection of roles\n * @property {function(data: Object): Promise<Role>} createRole - Creates a role\n * @property {function(id: string, data: Object): Promise<Role>} createRoleWithId - Creates a Role with a custom id\n * @property {function(id: string): Promise<SpaceMembership>} getSpaceMembership - Gets a space membership\n * @property {function(): Promise<SpaceMembershipCollection>} getSpaceMemberships - Gets a space memnerships collection\n * @property {function(data: Object): Promise<SpaceMembership>} createSpaceMembership - Creates a space membership\n * @property {function(id: string, data: Object): Promise<SpaceMembership>} createSpaceMembershipWithId - Creates a space membership with a custom id\n * @property {function(id: string): Promise<ApiKey>} getApiKey - Gets an api key\n * @property {function(): Promise<ApiKeyCollection>} getApiKeys - Gets a collection of api keys\n * @property {function(data: Object): Promise<ApiKey>} createApiKey - Creates an api key\n * @property {function(id: string, data: Object): Promise<ApiKey>} createSpaceApi.createApiKeyWithId - Creates an api key with a custom id\n * @property {function(): Object} toPlainObject - Returns this Space as a plain JS object\n * @example\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * //================================================================================================\n * // To get a space object you have two options:\n * //\n * // 1. by creating a new space\n * //\n * // var space = await client.createSpace({name: \"My new space\"})\n * //\n * // OR\n * //\n * // 2. Get an existing one by id\n * //\n * // var space = await client.getSpace('SPACE_ID')\n * //================================================================================================\n *\n * // We'll pick option 2.\n * //\n * // A space object will be like so\n * // {\n * //   \"sys\": {\n * //     \"type\": \"Space\",\n * //     \"id\": \"cfexampleapi\",\n * //     \"version\": 3,\n * //     \"createdAt\": \"2015-05-18T11:29:46.809Z\",\n * //     \"createdBy\": {\n * //       \"sys\": {\n * //         \"type\": \"Link\",\n * //         \"linkType\": \"User\",\n * //         \"id\": \"4FLrUHftHW3v2BLi9fzfjU\"\n * //       }\n * //     },\n * //     \"updatedAt\": \"2015-05-18T11:29:46.809Z\",\n * //     \"updatedBy\": {\n * //       \"sys\": {\n * //         \"type\": \"Link\",\n * //         \"linkType\": \"User\",\n * //         \"id\": \"4FLrUHftHW3v2BLi9fzfjU\"\n * //       }\n * //     }\n * //   },\n * //   \"name\": \"Contentful Example API\"\n * // }\n * var space = await client.getSpace('cfexampleapi')\n *\n * // Example Deleting a space\n * space.delete()\n * .catch(err => console.log(err))\n *\n * // Example updating a space\n * space.name = 'Updated Space Name'\n * space.update()\n * .then(space => console.log(space.name) // `Updated Space Name`)\n *\n * // Example getting a contentType\n * space.getContentType('contentTypeId')\n * .then(contentType => console.log(contentType)) // @see {ContentType}\n *\n * // Example getting an editorInterface for a contentType\n * // an editorInterface is a set of configuration that defines how a field look like\n * // example singleLine, etc...\n * space.getEditorInterfaceForContentType('contentTypeId')\n * .then(editorInterface => console.log(editorInterface))\n *\n * // Example creating a contentType\n * space.createContentType({name: 'Post', fields: []})\n * .then(ct => console.log(ct))\n *\n * // Example Creating a contentType with a custom id\n * space.createContentTypeWithId('post', {name: 'Post', fields: []})\n * .then(ct => console.log(ct))\n *\n * // Example getting all entries form a space where contentType is `contentTypeId`\n * // you can add more query params along with the content_type key, like 'limit':'1000', 'order':'sys.createdAt' and more\n * // for more infos about the query check https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\n * space.getEntries({content_type: 'contentTypeId'})\n * .then(entries => console.log(entries.items))\n *\n * // Example Creating an entry with a localized title field\n * // you can fill in all the fields defined in the contentType with the id 'contentTypeId'\n * // so if you have another field of type text for example called description, you can add 'description' in the fields object\n * // that will be sent to the server\n * space.createEntry('contentTypeId', {\n *   fields: {\n *     title: {\n *       'en-US': 'english content',\n *       'de-DE': 'german content'\n *     }\n *   }\n * })\n * .then(e => console.log(e))\n *\n * // Example getting an entry by id\n * space.getEntry('entryId')\n *  .then(entity => console.log(entry))\n *\n * // Example getting assets\n * space.getAssets()\n *  .then(response => console.log(response.items))\n *\n * // Example getting an asset\n * space.getAsset('assetId')\n * .then(asset => console.log(asset)) // @see {Asset}\n *\n * // Example creating an asset\n * // After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n * // After processing the upload property name will be replace by 'url'\n * // if you want to create an asset with a custom id please use the space.createAssetWithId('id', data)\n * space.createAsset(\n *   fields: {\n *     file: {\n *       'en-US': {\n *          contentType: 'image/jpeg',\n *          fileName: 'filename_english.jpg',\n *          upload: 'http://example.com/filename_original_en.jpg'\n *       },\n *       'de-DE': {\n *          contentType: 'image/jpeg',\n *          fileName: 'filename_german.jpg',\n *          upload: 'http://example.com/filename_original_de.jpg'\n *       }\n *     }\n *   }\n * )\n * .then(asset => asset.processForAllLocales())\n */\n\n/**\n * @typedef {SpaceCollection} SpaceCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {Array<Space>} items - An array of spaces\n * @property {function(): Object} toPlainObject - Returns this Space collection as a plain JS object\n * @example\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * client.getSpaces()\n *   .then((spaceCollection) => {\n *     console.log(spaceCollection.items) // list of spaces @see {Space}\n *   })\n */\n\n/**\n * Creates API object with methods to access the Space API\n * @private\n * @param {http: Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulSpaceAPI}\n */\nexport default function createSpaceApi ({\n  http,\n  httpUpload\n}) {\n  const {wrapSpace} = entities.space\n  const {wrapContentType, wrapContentTypeCollection} = entities.contentType\n  const {wrapEntry, wrapEntryCollection} = entities.entry\n  const {wrapAsset, wrapAssetCollection} = entities.asset\n  const {wrapLocale, wrapLocaleCollection} = entities.locale\n  const {wrapWebhook, wrapWebhookCollection} = entities.webhook\n  const {wrapRole, wrapRoleCollection} = entities.role\n  const {wrapSpaceMembership, wrapSpaceMembershipCollection} = entities.spaceMembership\n  const {wrapApiKey, wrapApiKeyCollection} = entities.apiKey\n  const {wrapEditorInterface} = entities.editorInterface\n  const {wrapUpload} = entities.upload\n\n  /**\n   * Space instances.\n   * @namespace Space\n   */\n\n  /**\n   * Deletes the space\n   * @memberof Space\n   * @func delete\n   * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n   * @example\n   * space.delete()\n   * .catch(err => console.log(err))\n   */\n  function deleteSpace () {\n    return http.delete('')\n    .then((response) => {}, errorHandler)\n  }\n\n  /**\n   * Updates the space\n   * @memberof Space\n   * @func update\n   * @return {Promise<Space.Space>} Promise for the updated space.\n   */\n  function updateSpace () {\n    const raw = this.toPlainObject()\n    const data = omit(raw, ['sys'])\n    return http.put('', data, {\n      headers: {\n        'X-Contentful-Version': raw.sys.version\n      }\n    })\n    .then((response) => wrapSpace(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<ContentType.ContentType>} Promise for a Content Type\n   * @example\n   */\n  function getContentType (id) {\n    return http.get('content_types/' + id)\n    .then((response) => wrapContentType(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets an EditorInterface for a ContentType\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} contentTypeId\n   * @return {Promise<EditorInterface.EditorInterface>} Promise for an EditorInterface\n   * @example\n   * space.getEditorInterfaceForContentType('contentTypeId')\n   * .then(editorInterface => console.log(editorInterface))\n   */\n  function getEditorInterfaceForContentType (contentTypeId) {\n    return http.get('content_types/' + contentTypeId + '/editor_interface')\n    .then((response) => wrapEditorInterface(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulSpaceAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<ContentType.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * space.getContentTypes()\n   * .then(contentTypes => console.log(contentTypes.items))\n   */\n  function getContentTypes (query = {}) {\n    return http.get('content_types', createRequestConfig({query: query}))\n    .then((response) => wrapContentTypeCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Content Type\n   * @memberof ContentfulSpaceAPI\n   * @see {ContentType}\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * space.createContentType({name: 'Post', fields: []})\n   * .then(ct => console.log(ct))\n   */\n  function createContentType (data) {\n    return http.post('content_types', data)\n    .then((response) => wrapContentType(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Content Type with a custom id\n   * @memberof ContentfulSpaceAPI\n   * @see {ContentType.ContentType}\n   * @param {string} id - Content Type ID\n   * @param {object} data - Object representation of the Content Type to be created\n   * @return {Promise<ContentType.ContentType>} Promise for the newly created Content Type\n   * @example\n   * space.createContentType('post', {name: 'Post', fields: []})\n   * .then(ct => console.log(ct))\n   */\n  function createContentTypeWithId (id, data) {\n    return http.put('content_types/' + id, data)\n    .then((response) => wrapContentType(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets an Entry\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entry.Entry>} Promise for an Entry\n   * @example\n   * space.getEntry('entryId')\n   * .then(entry => console.log(entry))\n   */\n  function getEntry (id, query = {}) {\n    normalizeSelect(query)\n    return http.get('entries/' + id, createRequestConfig({query: query}))\n    .then((response) => wrapEntry(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Entries\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulSpaceAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entry.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * space.getEntries({content_type: 'contentTypeId'})\n   * .then(entries => console.log(entries.items))\n   */\n  function getEntries (query = {}) {\n    normalizeSelect(query)\n    return http.get('entries', createRequestConfig({query: query}))\n    .then((response) => wrapEntryCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Entry\n   * @memberof ContentfulSpaceAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type which this Entry is based on\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * space.createEntry('contentTypeId', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'english content',\n   *       'de-DE': 'german content'\n   *     }\n   *   }\n   * })\n   * .then(e => console.log(e))\n   */\n  function createEntry (contentTypeId, data) {\n    return http.post('entries', data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    })\n    .then((response) => wrapEntry(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Entry with a custom id\n   * @memberof ContentfulSpaceAPI\n   * @see {Entry.Entry}\n   * @param {string} contentTypeId - The Content Type which this Entry is based on\n   * @param {string} id - Entry ID\n   * @param {object} data - Object representation of the Entry to be created\n   * @return {Promise<Entry.Entry>} Promise for the newly created Entry\n   * @example\n   * space.createEntryWithId('contentTypeId', 'entryId', {\n   *   fields: {\n   *     title: {\n   *       'en-US': 'english content',\n   *       'de-DE': 'german content'\n   *     }\n   *   }\n   * })\n   * .then(e => console.log(e))\n   */\n  function createEntryWithId (contentTypeId, id, data) {\n    return http.put('entries/' + id, data, {\n      headers: {\n        'X-Contentful-Content-Type': contentTypeId\n      }\n    })\n    .then((response) => wrapEntry(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets an Asset\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Asset.Asset>} Promise for an Asset\n   * @example\n   * space.getAsset('assetId')\n   * .then(asset => console.log(asset))\n   */\n  function getAsset (id, query = {}) {\n    normalizeSelect(query)\n    return http.get('assets/' + id, createRequestConfig({query: query}))\n    .then((response) => wrapAsset(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Assets\n   * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n   * from your entry in the backend\n   * @memberof ContentfulSpaceAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Asset.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * space.getAssets()\n   * .then(assets => console.log(assets.items))\n   */\n  function getAssets (query = {}) {\n    normalizeSelect(query)\n    return http.get('assets', createRequestConfig({query: query}))\n    .then((response) => wrapAssetCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * space.createAsset({\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          upload: 'http://example.com/filename_original_en.jpg'\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_german.jpg',\n   *          upload: 'http://example.com/filename_original_de.jpg'\n   *       }\n   *     }\n   *   }\n   * })\n   * .then(e => console.log(e))\n   */\n  function createAsset (data) {\n    return http.post('assets', data)\n    .then((response) => wrapAsset(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Asset with a custom id. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {string} id - Asset ID\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * space.createAssetWithId('image', {\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          upload: 'http://example.com/filename_original_en.jpg'\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_german.jpg',\n   *          upload: 'http://example.com/filename_original_de.jpg'\n   *       }\n   *     }\n   *   }\n   * })\n   * .then(e => console.log(e))\n   */\n  function createAssetWithId (id, data) {\n    return http.put('assets/' + id, data)\n    .then((response) => wrapAsset(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n   * @memberof ContentfulSpaceAPI\n   * @see {Asset.Asset}\n   * @param {object} data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n   * @param {object} data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Asset.Asset>} Promise for the newly created Asset\n   * @example\n   * space.createAssetFromFiles({\n   *   fields: {\n   *     file: {\n   *       'en-US': {\n   *          contentType: 'image/jpeg',\n   *          fileName: 'filename_english.jpg',\n   *          file: createReadStream('path/to/filename_english.jpg')\n   *       },\n   *       'de-DE': {\n   *          contentType: 'image/svg+xml',\n   *          fileName: 'filename_german.svg',\n   *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n   *       }\n   *     }\n   *   }\n   * })\n   * .then(e => console.log(e))\n   */\n  function createAssetFromFiles (data) {\n    const { file } = data.fields\n    return Promise.all(\n      Object.keys(file).map((locale) => {\n        const { contentType, fileName } = file[locale]\n        return createUpload(file[locale])\n        .then((upload) => {\n          return {\n            [locale]: {\n              contentType,\n              fileName,\n              uploadFrom: {\n                sys: {\n                  type: 'Link',\n                  linkType: 'Upload',\n                  id: upload.sys.id\n                }\n              }\n            }\n          }\n        })\n      })\n    )\n    .then((uploads) => {\n      data.fields.file = uploads.reduce((fieldsData, upload) => {\n        return assign(fieldsData, upload)\n      }, {})\n      return createAsset(data)\n    })\n    .catch(errorHandler)\n  }\n\n  /**\n   * Creates a Upload.\n   * @memberof ContentfulSpaceAPI\n   * @param {object} data - Object with file information.\n   * @param {object} data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n   * @return {Promise<Upload>} Upload object containing information about the uploaded file.\n   * @example\n   * const uploadStream = createReadStream('path/to/filename_english.jpg')\n   * space.createUpload(uploadStream)\n   */\n  function createUpload (data) {\n    const { file } = data\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'))\n    }\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    })\n    .then(uploadResponse => {\n      return wrapUpload(httpUpload, uploadResponse.data)\n    })\n    .catch(errorHandler)\n  }\n\n  /**\n   * Gets an Upload\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<Upload>} Promise for an Upload\n   * @example\n   * space.getUpload('uploadId')\n   * .then(upload => console.log(upload))\n   */\n  function getUpload (id) {\n    return httpUpload.get('uploads/' + id)\n    .then((response) => wrapUpload(http, response.data))\n    .catch(errorHandler)\n  }\n\n  /**\n   * Gets a Locale\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<Locale.Locale>} Promise for an Locale\n   * @example\n   * space.getLocale('localeId')\n   * .then(locale => console.log(locale))\n   */\n  function getLocale (id) {\n    return http.get('locales/' + id)\n    .then((response) => wrapLocale(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Locales\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Locale.LocaleCollection>} Promise for a collection of Locales\n   * @example\n   * space.getLocales()\n   * .then(locales => console.log(locales.items))\n   */\n  function getLocales () {\n    return http.get('locales')\n    .then((response) => wrapLocaleCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Locale\n   * @memberof ContentfulSpaceAPI\n   * @see {Locale.Locale}\n   * @param {object} data - Object representation of the Locale to be created\n   * @return {Promise<Locale.Locale>} Promise for the newly created Locale\n   * @example\n   * space.createLocale({name: 'German (Germany)', code: 'de-DE'})\n   * .then(e => console.log(e))\n   */\n  function createLocale (data) {\n    return http.post('locales', data)\n    .then((response) => wrapLocale(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a Webhook\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<Webhook.Webhook>} Promise for a Webhook\n   * @example\n   * space.getWebhook('id')\n   * .then(webhook => console.log(webhook))\n   */\n  function getWebhook (id) {\n    return http.get('webhook_definitions/' + id)\n    .then((response) => wrapWebhook(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Webhooks\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Webhook.WebhookCollection>} Promise for a collection of Webhooks\n   * @example\n   * space.getWebhooks()\n   * .then(webhooks => console.log(webhooks.items))\n   */\n  function getWebhooks () {\n    return http.get('webhook_definitions')\n    .then((response) => wrapWebhookCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Webhook\n   * @memberof ContentfulSpaceAPI\n   * @see {Webhook.Webhook}\n   * @param {object} data - Object representation of the Webhook to be created\n   * @return {Promise<Webhook.Webhook>} Promise for the newly created Webhook\n   * @example\n   * space.createWebhook({})\n   * .then(webhook => console.log(webhook))\n   */\n  function createWebhook (data) {\n    return http.post('webhook_definitions', data)\n    .then((response) => wrapWebhook(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Webhook with a custom id\n   * @memberof ContentfulSpaceAPI\n   * @see {Webhook.Webhook}\n   * @param {string} id - Webhook ID\n   * @param {object} data - Object representation of the Webhook to be created\n   * @return {Promise<Webhook.Webhook>} Promise for the newly created Webhook\n   * @example\n   * space.createWebhook('id', {})\n   * .then(webhook => console.log(webhook))\n   */\n  function createWebhookWithId (id, data) {\n    return http.put('webhook_definitions/' + id, data)\n    .then((response) => wrapWebhook(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a Space Membership\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for a Space Membership\n   * @example\n   * space.getSpaceMembership('id')\n   * .then(spaceMembership => console.log(spaceMembership))\n   */\n  function getSpaceMembership (id) {\n    return http.get('space_memberships/' + id)\n    .then((response) => wrapSpaceMembership(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Space Memberships\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<SpaceMembership.SpaceMembershipCollection>} Promise for a collection of Space Memberships\n   * @example\n   * space.getSpaceMemberships()\n   * .then(spaceMemberships => console.log(spaceMemberships.items))\n   */\n  function getSpaceMemberships () {\n    return http.get('space_memberships')\n    .then((response) => wrapSpaceMembershipCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Space Membership\n   * @memberof ContentfulSpaceAPI\n   * @see {SpaceMembership.SpaceMembership}\n   * @param {object} data - Object representation of the Space Membership to be created\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for the newly created Space Membership\n   * @example\n   * space.createSpaceMembership({})\n   * .then(spaceMembership => console.log(spaceMembership))\n   */\n  function createSpaceMembership (data) {\n    return http.post('space_memberships', data)\n    .then((response) => wrapSpaceMembership(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Space Membership with a custom id\n   * @memberof ContentfulSpaceAPI\n   * @see {SpaceMembership.SpaceMembership}\n   * @param {string} id - Space Membership ID\n   * @param {object} data - Object representation of the Space Membership to be created\n   * @return {Promise<SpaceMembership.SpaceMembership>} Promise for the newly created Space Membership\n   * @example\n   * space.createSpaceMembership('id', {})\n   * .then(spaceMembership => console.log(spaceMembership))\n   */\n  function createSpaceMembershipWithId (id, data) {\n    return http.put('space_memberships/' + id, data)\n    .then((response) => wrapSpaceMembership(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a Role\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<Role.Role>} Promise for a Role\n   * @example\n   * space.getRole('id')\n   * .then(role => console.log(role))\n   */\n  function getRole (id) {\n    return http.get('roles/' + id)\n    .then((response) => wrapRole(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Roles\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<Role.RoleCollection>} Promise for a collection of Roles\n   * @example\n   * space.getRoles()\n   * .then(roles => console.log(roles.items))\n   */\n  function getRoles () {\n    return http.get('roles')\n    .then((response) => wrapRoleCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Role\n   * @memberof ContentfulSpaceAPI\n   * @see {Role.Role}\n   * @param {object} data - Object representation of the Role to be created\n   * @return {Promise<Role.Role>} Promise for the newly created Role\n   * @example\n   * space.createRole({})\n   * .then(role => console.log(role))\n   */\n  function createRole (data) {\n    return http.post('roles', data)\n    .then((response) => wrapRole(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Role with a custom id\n   * @memberof ContentfulSpaceAPI\n   * @see {Role.Role}\n   * @param {string} id - Role ID\n   * @param {object} data - Object representation of the Role to be created\n   * @return {Promise<Role.Role>} Promise for the newly created Role\n   * @example\n   * space.createRole('id', {})\n   * .then(role => console.log(role))\n   */\n  function createRoleWithId (id, data) {\n    return http.put('roles/' + id, data)\n    .then((response) => wrapRole(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a Api Key\n   * @memberof ContentfulSpaceAPI\n   * @param  {string} id\n   * @return {Promise<ApiKey.ApiKey>} Promise for a Api Key\n   * @example\n   * space.getApiKey('id')\n   * .then(apiKey => console.log(apiKey))\n   */\n  function getApiKey (id) {\n    return http.get('api_keys/' + id)\n    .then((response) => wrapApiKey(http, response.data), errorHandler)\n  }\n\n  /**\n   * Gets a collection of Api Keys\n   * @memberof ContentfulSpaceAPI\n   * @return {Promise<ApiKey.ApiKeyCollection>} Promise for a collection of Api Keys\n   * @example\n   * space.getApiKeys()\n   * .then(apiKeys => console.log(apiKeys.items))\n   */\n  function getApiKeys () {\n    return http.get('api_keys')\n    .then((response) => wrapApiKeyCollection(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Api Key\n   * @memberof ContentfulSpaceAPI\n   * @see {ApiKey.ApiKey}\n   * @param {object} data - Object representation of the Api Key to be created\n   * @return {Promise<ApiKey.ApiKey>} Promise for the newly created Api Key\n   * @example\n   * space.createApiKey({})\n   * .then(apiKey => console.log(apiKey))\n   */\n  function createApiKey (data) {\n    return http.post('api_keys', data)\n    .then((response) => wrapApiKey(http, response.data), errorHandler)\n  }\n\n  /**\n   * Creates a Api Key with a custom id\n   * @memberof ContentfulSpaceAPI\n   * @see {ApiKey.ApiKey}\n   * @param {string} id - Api Key ID\n   * @param {object} data - Object representation of the Api Key to be created\n   * @return {Promise<ApiKey.ApiKey>} Promise for the newly created Api Key\n   * @example\n   * space.createApiKey('id', {})\n   * .then(apiKey => console.log(apiKey))\n   */\n  function createApiKeyWithId (id, data) {\n    return http.put('api_keys/' + id, data)\n    .then((response) => wrapApiKey(http, response.data), errorHandler)\n  }\n\n  /*\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   * */\n  function normalizeSelect (query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys'\n    }\n  }\n\n  return {\n    delete: deleteSpace,\n    update: updateSpace,\n    getContentType: getContentType,\n    getContentTypes: getContentTypes,\n    createContentType: createContentType,\n    createContentTypeWithId: createContentTypeWithId,\n    getEditorInterfaceForContentType: getEditorInterfaceForContentType,\n    getEntry: getEntry,\n    getEntries: getEntries,\n    createEntry: createEntry,\n    createEntryWithId: createEntryWithId,\n    getAsset: getAsset,\n    getAssets: getAssets,\n    createAsset: createAsset,\n    createAssetWithId: createAssetWithId,\n    createAssetFromFiles: createAssetFromFiles,\n    getUpload: getUpload,\n    createUpload: createUpload,\n    getLocale: getLocale,\n    getLocales: getLocales,\n    createLocale: createLocale,\n    getWebhook: getWebhook,\n    getWebhooks: getWebhooks,\n    createWebhook: createWebhook,\n    createWebhookWithId: createWebhookWithId,\n    getRole: getRole,\n    getRoles: getRoles,\n    createRole: createRole,\n    createRoleWithId: createRoleWithId,\n    getSpaceMembership: getSpaceMembership,\n    getSpaceMemberships: getSpaceMemberships,\n    createSpaceMembership: createSpaceMembership,\n    createSpaceMembershipWithId: createSpaceMembershipWithId,\n    getApiKey: getApiKey,\n    getApiKeys: getApiKeys,\n    createApiKey: createApiKey,\n    createApiKeyWithId: createApiKeyWithId\n  }\n}\n",
    "static": true,
    "longname": "lib/create-space-api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "typedef",
    "name": "Space",
    "memberof": "lib/create-space-api.js",
    "static": true,
    "longname": "lib/create-space-api.js~Space",
    "access": null,
    "description": "",
    "examples": [
      "// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\n//================================================================================================\n// To get a space object you have two options:\n//\n// 1. by creating a new space\n//\n// var space = await client.createSpace({name: \"My new space\"})\n//\n// OR\n//\n// 2. Get an existing one by id\n//\n// var space = await client.getSpace('SPACE_ID')\n//================================================================================================\n\n// We'll pick option 2.\n//\n// A space object will be like so\n// {\n//   \"sys\": {\n//     \"type\": \"Space\",\n//     \"id\": \"cfexampleapi\",\n//     \"version\": 3,\n//     \"createdAt\": \"2015-05-18T11:29:46.809Z\",\n//     \"createdBy\": {\n//       \"sys\": {\n//         \"type\": \"Link\",\n//         \"linkType\": \"User\",\n//         \"id\": \"4FLrUHftHW3v2BLi9fzfjU\"\n//       }\n//     },\n//     \"updatedAt\": \"2015-05-18T11:29:46.809Z\",\n//     \"updatedBy\": {\n//       \"sys\": {\n//         \"type\": \"Link\",\n//         \"linkType\": \"User\",\n//         \"id\": \"4FLrUHftHW3v2BLi9fzfjU\"\n//       }\n//     }\n//   },\n//   \"name\": \"Contentful Example API\"\n// }\nvar space = await client.getSpace('cfexampleapi')\n\n// Example Deleting a space\nspace.delete()\n.catch(err => console.log(err))\n\n// Example updating a space\nspace.name = 'Updated Space Name'\nspace.update()\n.then(space => console.log(space.name) // `Updated Space Name`)\n\n// Example getting a contentType\nspace.getContentType('contentTypeId')\n.then(contentType => console.log(contentType)) // @see {ContentType}\n\n// Example getting an editorInterface for a contentType\n// an editorInterface is a set of configuration that defines how a field look like\n// example singleLine, etc...\nspace.getEditorInterfaceForContentType('contentTypeId')\n.then(editorInterface => console.log(editorInterface))\n\n// Example creating a contentType\nspace.createContentType({name: 'Post', fields: []})\n.then(ct => console.log(ct))\n\n// Example Creating a contentType with a custom id\nspace.createContentTypeWithId('post', {name: 'Post', fields: []})\n.then(ct => console.log(ct))\n\n// Example getting all entries form a space where contentType is `contentTypeId`\n// you can add more query params along with the content_type key, like 'limit':'1000', 'order':'sys.createdAt' and more\n// for more infos about the query check https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\nspace.getEntries({content_type: 'contentTypeId'})\n.then(entries => console.log(entries.items))\n\n// Example Creating an entry with a localized title field\n// you can fill in all the fields defined in the contentType with the id 'contentTypeId'\n// so if you have another field of type text for example called description, you can add 'description' in the fields object\n// that will be sent to the server\nspace.createEntry('contentTypeId', {\n  fields: {\n    title: {\n      'en-US': 'english content',\n      'de-DE': 'german content'\n    }\n  }\n})\n.then(e => console.log(e))\n\n// Example getting an entry by id\nspace.getEntry('entryId')\n .then(entity => console.log(entry))\n\n// Example getting assets\nspace.getAssets()\n .then(response => console.log(response.items))\n\n// Example getting an asset\nspace.getAsset('assetId')\n.then(asset => console.log(asset)) // @see {Asset}\n\n// Example creating an asset\n// After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n// After processing the upload property name will be replace by 'url'\n// if you want to create an asset with a custom id please use the space.createAssetWithId('id', data)\nspace.createAsset(\n  fields: {\n    file: {\n      'en-US': {\n         contentType: 'image/jpeg',\n         fileName: 'filename_english.jpg',\n         upload: 'http://example.com/filename_original_en.jpg'\n      },\n      'de-DE': {\n         contentType: 'image/jpeg',\n         fileName: 'filename_german.jpg',\n         upload: 'http://example.com/filename_original_de.jpg'\n      }\n    }\n  }\n)\n.then(asset => asset.processForAllLocales())"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sys.id",
        "description": "Space id"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sys.type",
        "description": "Entity type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Space name"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "delete",
        "description": "Deletes the space"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Space>"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "Updates the space"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "getContentType",
        "description": "Get a contentType by id"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ContentTypeCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getContentTypes",
        "description": "Gets a collection of contentTypes"
      },
      {
        "nullable": null,
        "types": [
          "function(data:{name: string, fields: Array}): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "createContentType",
        "description": "creates a ContentType"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, data: {name: string, fields: Array}): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "createContentTypeWithId",
        "description": "creates a ContentType with a specified id"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "getEntry",
        "description": "Gets an Entry with a custom id"
      },
      {
        "nullable": null,
        "types": [
          "function(query:Object): Promise<EntryCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getEntries",
        "description": "Gets a collection of entries"
      },
      {
        "nullable": null,
        "types": [
          "function(contentTypeId: string, data: {fields: Object}): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "createEntry",
        "description": "Creates an Entry"
      },
      {
        "nullable": null,
        "types": [
          "function(contentTypeId: string, id: string, data: {fields: Object}): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "createEntryWithId",
        "description": "Creates an Entry with a specified id"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, query: Object): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "getAsset",
        "description": "Gets an asset by id"
      },
      {
        "nullable": null,
        "types": [
          "function(query: Object): Promise<AssetCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getAssets",
        "description": "Gets a collection of assets"
      },
      {
        "nullable": null,
        "types": [
          "function(data: {fields: Object}): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "createAsset",
        "description": "Creates an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, data: {fields: Object}):Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "createAssetWithId",
        "description": "Creates an asset with the custom id"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Locale>"
        ],
        "spread": false,
        "optional": false,
        "name": "getLocale",
        "description": "Gets a locale"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<LocaleCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getLocales",
        "description": "Gets a collection of locales"
      },
      {
        "nullable": null,
        "types": [
          "function(data:{name: string, code: string}): Promise<Locale>"
        ],
        "spread": false,
        "optional": false,
        "name": "createLocale",
        "description": "Creates a Locale"
      },
      {
        "nullable": null,
        "types": [
          "function(id:string): Promise<webhook>"
        ],
        "spread": false,
        "optional": false,
        "name": "getWebhook",
        "description": "Gets a webhook"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<WebhookCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getWebhooks",
        "description": "Gets a collection of webhooks"
      },
      {
        "nullable": null,
        "types": [
          "function(data: Object): Promise<Webhook>"
        ],
        "spread": false,
        "optional": false,
        "name": "createWebhook",
        "description": "Creates a webhook"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, data: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "createWebhookWithId",
        "description": "Creates a webhook with a custom id"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string): Promise<Role>"
        ],
        "spread": false,
        "optional": false,
        "name": "getRole",
        "description": "Gets a Role"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<RoleCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getRoles",
        "description": "Gets a collection of roles"
      },
      {
        "nullable": null,
        "types": [
          "function(data: Object): Promise<Role>"
        ],
        "spread": false,
        "optional": false,
        "name": "createRole",
        "description": "Creates a role"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, data: Object): Promise<Role>"
        ],
        "spread": false,
        "optional": false,
        "name": "createRoleWithId",
        "description": "Creates a Role with a custom id"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string): Promise<SpaceMembership>"
        ],
        "spread": false,
        "optional": false,
        "name": "getSpaceMembership",
        "description": "Gets a space membership"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<SpaceMembershipCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getSpaceMemberships",
        "description": "Gets a space memnerships collection"
      },
      {
        "nullable": null,
        "types": [
          "function(data: Object): Promise<SpaceMembership>"
        ],
        "spread": false,
        "optional": false,
        "name": "createSpaceMembership",
        "description": "Creates a space membership"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, data: Object): Promise<SpaceMembership>"
        ],
        "spread": false,
        "optional": false,
        "name": "createSpaceMembershipWithId",
        "description": "Creates a space membership with a custom id"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string): Promise<ApiKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "getApiKey",
        "description": "Gets an api key"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ApiKeyCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "getApiKeys",
        "description": "Gets a collection of api keys"
      },
      {
        "nullable": null,
        "types": [
          "function(data: Object): Promise<ApiKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "createApiKey",
        "description": "Creates an api key"
      },
      {
        "nullable": null,
        "types": [
          "function(id: string, data: Object): Promise<ApiKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "createSpaceApi.createApiKeyWithId",
        "description": "Creates an api key with a custom id"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Space as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "Space"
      ],
      "optional": false,
      "name": "Space"
    }
  },
  {
    "__docId__": 7,
    "kind": "typedef",
    "name": "SpaceCollection",
    "memberof": "lib/create-space-api.js",
    "static": true,
    "longname": "lib/create-space-api.js~SpaceCollection",
    "access": null,
    "description": "",
    "examples": [
      "// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nclient.getSpaces()\n  .then((spaceCollection) => {\n    console.log(spaceCollection.items) // list of spaces @see {Space}\n  })"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "Array<Space>"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of spaces"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Space collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "SpaceCollection"
      ],
      "optional": false,
      "name": "SpaceCollection"
    }
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "createSpaceApi",
    "memberof": "lib/create-space-api.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/create-space-api.js~createSpaceApi",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/create-space-api.js",
    "importStyle": "createSpaceApi",
    "description": "Creates API object with methods to access the Space API",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Object} http - HTTP client instance"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} entities - Object with wrapper methods for each kind of entity"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "http: Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "API initialization params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ContentfulSpaceAPI"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "name": "lib/enhance-with-methods.js",
    "content": "/**\n * This method enhances a base object which would normally contain data, with\n * methods from another object that might work on manipulating that data.\n * All the added methods are set as non enumerable, non configurable, and non\n * writable properties. This ensures that if we try to clone or stringify the\n * base object, we don't have to worry about these additional methods.\n * @private\n * @param {object} baseObject - Base object with data\n * @param {object} methodsObject - Object with methods as properties. The key\n * values used here will be the same that will be defined on the baseObject.\n */\nexport default function enhanceWithMethods (baseObject, methodsObject) {\n  return Object.keys(methodsObject).reduce((enhancedObject, methodName) => {\n    Object.defineProperty(enhancedObject, methodName, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: methodsObject[methodName]\n    })\n    return enhancedObject\n  }, baseObject)\n}\n",
    "static": true,
    "longname": "lib/enhance-with-methods.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "enhanceWithMethods",
    "memberof": "lib/enhance-with-methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/enhance-with-methods.js~enhanceWithMethods",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/enhance-with-methods.js",
    "importStyle": "enhanceWithMethods",
    "description": "This method enhances a base object which would normally contain data, with\nmethods from another object that might work on manipulating that data.\nAll the added methods are set as non enumerable, non configurable, and non\nwritable properties. This ensures that if we try to clone or stringify the\nbase object, we don't have to worry about these additional methods.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "baseObject",
        "description": "Base object with data"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "methodsObject",
        "description": "Object with methods as properties. The key\nvalues used here will be the same that will be defined on the baseObject."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "file",
    "name": "lib/entities/api-key.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createUpdateEntity,\n  createDeleteEntity\n} from '../instance-actions'\n\n/**\n * @typedef {ApiKey} ApiKey\n * @property {Object} sys - System metadata\n * @property {string} name\n * @property {string} description\n * @property {function(): Promise<ApiKey>} update() - Sends an update to the server with any changes made to the object's properties\n * @property {function(): Promise} delete() - Deletes this object on the server\n * @property {function(): Object} toPlainObject - Returns this Api Key as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * var space = await client.getSpace('SPACE_ID')\n *\n * //=======================================================================================================\n * // You can get an ApiKey object by\n * //\n * // 1. Creating one\n * //\n * // var apiKey = await space.createApiKey({})\n * //\n * // OR\n * //\n * // 2. Get an existing one\n * //\n * // var apiKey = await space.getApiKey('API_KEY_ID')\n * //=======================================================================================================\n *\n * // we'll use option 2\n * var apiKey = await space.getApiKey('API_KEY_ID')\n *\n * // Example updating an APIKey\n * apiKey.name = 'New name'\n * apiKey.update()\n * .then(apiKey => console.log(apiKey.name))\n *\n * // Example deleting an ApiKey\n * apiKey.delete()\n * .catch(err => console.log(err))\n *\n */\n\n/**\n * @typedef {ApiKeyCollection} ApiKeyCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {ApiKey[]} items - Array of ApiKey\n * @property {function(): Object} toPlainObject - Returns this Api Key collection as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * var space = await client.getSpace('SPACE_ID')\n *\n * //get all the api keys\n * space.getApiKeys()\n * .then(apiKeys => console.log(apiKeys.items))\n */\nfunction createApiKeyApi (http) {\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'api_keys',\n      wrapperMethod: wrapApiKey\n    }),\n\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'api_keys'\n    })\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw api key data\n * @return {ApiKey} Wrapped api key data\n */\nexport function wrapApiKey (http, data) {\n  const apiKey = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(apiKey, createApiKeyApi(http))\n  return freezeSys(apiKey)\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw api key collection data\n * @return {ApiKeyCollection} Wrapped api key collection data\n */\nexport function wrapApiKeyCollection (http, data) {\n  const apiKeys = toPlainObject(cloneDeep(data))\n  apiKeys.items = apiKeys.items.map((entity) => wrapApiKey(http, entity))\n  return freezeSys(apiKeys)\n}\n",
    "static": true,
    "longname": "lib/entities/api-key.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 12,
    "kind": "typedef",
    "name": "ApiKey",
    "memberof": "lib/entities/api-key.js",
    "static": true,
    "longname": "lib/entities/api-key.js~ApiKey",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nvar space = await client.getSpace('SPACE_ID')\n\n//=======================================================================================================\n// You can get an ApiKey object by\n//\n// 1. Creating one\n//\n// var apiKey = await space.createApiKey({})\n//\n// OR\n//\n// 2. Get an existing one\n//\n// var apiKey = await space.getApiKey('API_KEY_ID')\n//=======================================================================================================\n\n// we'll use option 2\nvar apiKey = await space.getApiKey('API_KEY_ID')\n\n// Example updating an APIKey\napiKey.name = 'New name'\napiKey.update()\n.then(apiKey => console.log(apiKey.name))\n\n// Example deleting an ApiKey\napiKey.delete()\n.catch(err => console.log(err))"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ApiKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "update()",
        "description": "Sends an update to the server with any changes made to the object's properties"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "delete()",
        "description": "Deletes this object on the server"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Api Key as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "ApiKey"
      ],
      "optional": false,
      "name": "ApiKey"
    }
  },
  {
    "__docId__": 13,
    "kind": "typedef",
    "name": "ApiKeyCollection",
    "memberof": "lib/entities/api-key.js",
    "static": true,
    "longname": "lib/entities/api-key.js~ApiKeyCollection",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nvar space = await client.getSpace('SPACE_ID')\n\n//get all the api keys\nspace.getApiKeys()\n.then(apiKeys => console.log(apiKeys.items))"
    ],
    "lineNumber": 78,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "ApiKey[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "Array of ApiKey"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Api Key collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "ApiKeyCollection"
      ],
      "optional": false,
      "name": "ApiKeyCollection"
    }
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "wrapApiKey",
    "memberof": "lib/entities/api-key.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/api-key.js~wrapApiKey",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/api-key.js",
    "importStyle": "{wrapApiKey}",
    "description": "",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw api key data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ApiKey"
      ],
      "spread": false,
      "description": "Wrapped api key data"
    }
  },
  {
    "__docId__": 15,
    "kind": "function",
    "name": "wrapApiKeyCollection",
    "memberof": "lib/entities/api-key.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/api-key.js~wrapApiKeyCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/api-key.js",
    "importStyle": "{wrapApiKeyCollection}",
    "description": "",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw api key collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ApiKeyCollection"
      ],
      "spread": false,
      "description": "Wrapped api key collection data"
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "lib/entities/asset.js",
    "content": "import { Promise } from 'es6-promise'\nimport cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport errorHandler from '../error-handler'\nimport {\n  createUpdateEntity,\n  createDeleteEntity,\n  createPublishEntity,\n  createUnpublishEntity,\n  createArchiveEntity,\n  createUnarchiveEntity,\n  createPublishedChecker,\n  createUpdatedChecker,\n  createDraftChecker,\n  createArchivedChecker\n} from '../instance-actions'\n\nconst ASSET_PROCESSING_CHECK_WAIT = 2000\nconst ASSET_PROCESSING_CHECK_RETRIES = 10\n\n/**\n * @typedef {Asset} Asset\n * @property {Object} sys - Standard system metadata with additional asset specific properties\n * @property {string} sys.locale - If present, indicates the locale which this asset uses\n * @property {Object} fields - Object with content for each field\n * @property {string} fields.title - Title for this asset\n * @property {string} fields.description - Description for this asset\n * @property {Object} fields.file - File object for this asset\n * @property {Object} fields.file.fileName - Name for the file\n * @property {string} fields.file.contentType - Mime type for the file\n * @property {string} fields.file.upload - Url where the file is available to be downloaded from, into the Contentful asset system. After the asset is processed this field is gone.\n * @property {string} fields.file.url - Url where the file is available at the Contentful media asset system. This field won't be available until the asset is processed.\n * @property {Object} fields.file.details - Details for the file, depending on file type (example: image size in bytes, etc)\n * @property {boolean} isPublished - checks if the asset is published. A published asset might have unpublished changes (@see {Asset.isUpdated})\n * @property {boolean} isUpdated - Checks if the asset is updated. This means the asset was previously published but has unpublished changes.\n * @property {boolean} isArchived - Checks if asset is archived. This means it's not exposed to the Delivery/Preview APIs.\n * @property {boolean} isDraft - Checks if the asset is in draft mode. This means it is not published.\n * @property {function(): Promise<Asset>} update - Updates an asset\n * @property {function(): Promise<Asset>} delete - Deletes an asset\n * @property {function(): Promise<Asset>} publish - Publishes an asset\n * @property {function(): Promise<Asset>} unpublish - Unpublishes an asset\n * @property {function(): Promise<Asset>} archive - Archives an asset\n * @property {function(): Promise<Asset>} unarchive - Unarchives an asset\n * @property {function(locale: string, options: {processingCheckWait: number, processingCheckRetries: number}): Promise<Asset>} processForLocale - Triggers asset processing after an upload, for the file uploaded to a specific locale.\n * @property {function(options: {processingCheckWait: number, processingCheckRetries: number}): Promise<Asset>} processForAllLocales - Triggers asset processing after an upload, for the files uploaded to all locales of an asset.\n * @property {function(): Object} toPlainObject - Returns this Asset as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * var space = await client.getSpace('SPACE_ID')\n * var asset = await space.getAsset('ASSET_ID')\n *\n * // Example Creating an asset\n * var createdAsset = await space.createAsset(\n *   fields: {\n *     file: {\n *       'en-US': {\n *          contentType: 'image/jpeg',\n *          fileName: 'filename_english.jpg',\n *          upload: 'http://example.com/filename_original_en.jpg'\n *       },\n *       'de-DE': {\n *          contentType: 'image/jpeg',\n *          fileName: 'filename_german.jpg',\n *          upload: 'http://example.com/filename_original_de.jpg'\n *       }\n *     }\n *   }\n * )\n *\n * // Example Updating an asset\n * asset.fields.title = 'My new Title'\n * asset.update()\n * .then(asset => console.log(asset.fields.name['en-US']))\n *\n * // Process an asset for a specific locale\n * asset.processForLocale('en-US')\n * .then(asset => console.log(asset.fields.file['en-US'].url))\n *\n * // Process Asset for all locales\n * asset.processForAllLocales()\n * .then(asset => console.log(asset.fields.file['en-US'].url, asset.fields.file['de-DE'].url))\n *\n * // Publish an asset\n * asset.publish()\n * .then(asset => console.log(asset.sys.publishedVersion))\n *\n * // Delete an asset\n * asset.delete()\n * .catch(err => console.log(err))\n *\n * // unPublish an asset\n * asset.unpublish()\n * .then(asset => console.log(asset.sys))\n *\n * // archive an asset\n * asset.archive()\n * .then(asset => console.log(asset.sys.archivedVersion))\n *\n * // unarchive an asset\n * asset.unarchive()\n * .then(asset => console.log(asset.sys))\n */\n\n/**\n * @typedef {AssetCollection} AssetCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {Asset[]} items - an array of assets\n * @property {function(): Object} toPlainObject - Returns this Asset collection as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * let space = await client.getSpace('SPACE_ID')\n * let assetCollection = await space.getAssets()\n * console.log(\"the space contains \", assetCollection.items.length, \" assets\")\n * assetCollection.items.forEach((asset) => {\n *    // do something with asset @link {Asset}\n * })\n */\nfunction createAssetApi (http) {\n  function checkIfAssetHasUrl ({\n    resolve,\n    reject,\n    id,\n    locale,\n    processingCheckWait = ASSET_PROCESSING_CHECK_WAIT,\n    processingCheckRetries = ASSET_PROCESSING_CHECK_RETRIES,\n    checkCount = 0\n  }) {\n    http.get('assets/' + id)\n    .then((response) => wrapAsset(http, response.data), errorHandler)\n    .then((asset) => {\n      if (asset.fields.file[locale].url) {\n        resolve(asset)\n      } else if (checkCount === processingCheckRetries) {\n        const error = new Error()\n        error.name = 'AssetProcessingTimeout'\n        error.message = 'Asset is taking longer then expected to process.'\n        reject(error)\n      } else {\n        checkCount++\n        setTimeout(\n          () => checkIfAssetHasUrl({\n            resolve: resolve,\n            reject: reject,\n            id: id,\n            locale: locale,\n            checkCount: checkCount,\n            processingCheckWait,\n            processingCheckRetries\n          }),\n          processingCheckWait\n        )\n      }\n    })\n  }\n\n  function processForLocale (locale, {processingCheckWait, processingCheckRetries} = {}) {\n    const assetId = this.sys.id\n    return http.put('assets/' + this.sys.id + '/files/' + locale + '/process', null, {\n      headers: {\n        'X-Contentful-Version': this.sys.version\n      }\n    })\n    .then(() => {\n      return new Promise(\n        (resolve, reject) => checkIfAssetHasUrl({\n          resolve: resolve,\n          reject: reject,\n          id: assetId,\n          locale: locale,\n          processingCheckWait: processingCheckWait,\n          processingCheckRetries: processingCheckRetries\n        })\n      )\n    }, errorHandler)\n  }\n\n  function processForAllLocales (options = {}) {\n    const self = this\n    const locales = Object.keys(this.fields.file)\n    return Promise.all(locales.map((locale) => processForLocale.call(self, locale, options)))\n    .then((assets) => assets[0])\n  }\n\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Asset\n     * @func update\n     * @return {Promise<Asset>} Object returned from the server with updated changes.\n     * @example\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Asset\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'assets'\n    }),\n\n    /**\n     * Publishes the object\n     * @memberof Asset\n     * @func publish\n     * @return {Promise<Asset>} Object returned from the server with updated metadata.\n     * @example\n     */\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n\n    /**\n     * Unpublishes the object\n     * @memberof Asset\n     * @func unpublish\n     * @return {Promise<Asset>} Object returned from the server with updated metadata.\n     * @example\n     */\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n\n    /**\n     * Archives the object\n     * @memberof Asset\n     * @func archive\n     * @return {Promise<Asset>} Object returned from the server with updated metadata.\n     * @example\n     */\n    archive: createArchiveEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n\n    /**\n     * Unarchives the object\n     * @memberof Asset\n     * @func unarchive\n     * @return {Promise<Asset>} Object returned from the server with updated metadata.\n     * @example\n     */\n    unarchive: createUnarchiveEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n\n    /**\n     * Triggers asset processing after an upload, for the file uploaded to a specific locale.\n     * @memberof Asset\n     * @func processForLocale\n     * @param {string} locale - Locale which processing should be triggered for\n     * @param {object} options - Additional options for processing\n     * @prop {number} options.processingCheckWait - Time in milliseconds to wait before checking again if the asset has been processed (default: 500ms)\n     * @prop {number} options.processingCheckRetries - Maximum amount of times to check if the asset has been processed (default: 5)\n     * @return {Promise<Asset>} Object returned from the server with updated metadata.\n     * @throws {AssetProcessingTimeout} If the asset takes too long to process. If this happens, retrieve the asset again, and if the url property is available, then processing has succeeded. If not, your file might be damaged.\n     * @example\n     */\n    processForLocale: processForLocale,\n\n    /**\n     * Triggers asset processing after an upload, for the files uploaded to all locales of an asset.\n     * @memberof Asset\n     * @func processForAllLocales\n     * @param {object} options - Additional options for processing\n     * @prop {number} options.processingCheckWait - Time in milliseconds to wait before checking again if the asset has been processed (default: 500ms)\n     * @prop {number} options.processingCheckRetries - Maximum amount of times to check if the asset has been processed (default: 5)\n     * @return {Promise<Asset>} Object returned from the server with updated metadata.\n     * @throws {AssetProcessingTimeout} If the asset takes too long to process. If this happens, retrieve the asset again, and if the url property is available, then processing has succeeded. If not, your file might be damaged.\n     * @example\n     * asset.processForAllLocales()\n     * .then(asset => console.log(asset.fields.file['en-US'].url, asset.fields.file['de-DE'].url))\n     */\n    processForAllLocales: processForAllLocales,\n\n    /**\n     * Checks if the asset is published. A published asset might have unpublished changes (@see {Asset.isUpdated})\n     * @memberof Asset\n     * @func isPublished\n     * @return {boolean}\n     */\n    isPublished: createPublishedChecker(),\n\n    /**\n     * Checks if the asset is updated. This means the asset was previously published but has unpublished changes.\n     * @memberof Asset\n     * @func isUpdated\n     * @return {boolean}\n     */\n    isUpdated: createUpdatedChecker(),\n\n    /**\n     * Checks if the asset is in draft mode. This means it is not published.\n     * @memberof Asset\n     * @func isDraft\n     * @return {boolean}\n     */\n    isDraft: createDraftChecker(),\n\n    /**\n     * Checks if asset is archived. This means it's not exposed to the Delivery/Preview APIs.\n     * @memberof Asset\n     * @func isArchived\n     * @return {boolean}\n     */\n    isArchived: createArchivedChecker()\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw asset data\n * @return {Asset} Wrapped asset data\n */\nexport function wrapAsset (http, data) {\n  const asset = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(asset, createAssetApi(http))\n  return freezeSys(asset)\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw asset collection data\n * @return {AssetCollection} Wrapped asset collection data\n */\nexport function wrapAssetCollection (http, data) {\n  const assets = toPlainObject(cloneDeep(data))\n  assets.items = assets.items.map((entity) => wrapAsset(http, entity))\n  return freezeSys(assets)\n}\n",
    "static": true,
    "longname": "lib/entities/asset.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "ASSET_PROCESSING_CHECK_WAIT",
    "memberof": "lib/entities/asset.js",
    "static": true,
    "longname": "lib/entities/asset.js~ASSET_PROCESSING_CHECK_WAIT",
    "access": null,
    "export": false,
    "importPath": "contentful-management/lib/entities/asset.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "ASSET_PROCESSING_CHECK_RETRIES",
    "memberof": "lib/entities/asset.js",
    "static": true,
    "longname": "lib/entities/asset.js~ASSET_PROCESSING_CHECK_RETRIES",
    "access": null,
    "export": false,
    "importPath": "contentful-management/lib/entities/asset.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "typedef",
    "name": "Asset",
    "memberof": "lib/entities/asset.js",
    "static": true,
    "longname": "lib/entities/asset.js~Asset",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nvar space = await client.getSpace('SPACE_ID')\nvar asset = await space.getAsset('ASSET_ID')\n\n// Example Creating an asset\nvar createdAsset = await space.createAsset(\n  fields: {\n    file: {\n      'en-US': {\n         contentType: 'image/jpeg',\n         fileName: 'filename_english.jpg',\n         upload: 'http://example.com/filename_original_en.jpg'\n      },\n      'de-DE': {\n         contentType: 'image/jpeg',\n         fileName: 'filename_german.jpg',\n         upload: 'http://example.com/filename_original_de.jpg'\n      }\n    }\n  }\n)\n\n// Example Updating an asset\nasset.fields.title = 'My new Title'\nasset.update()\n.then(asset => console.log(asset.fields.name['en-US']))\n\n// Process an asset for a specific locale\nasset.processForLocale('en-US')\n.then(asset => console.log(asset.fields.file['en-US'].url))\n\n// Process Asset for all locales\nasset.processForAllLocales()\n.then(asset => console.log(asset.fields.file['en-US'].url, asset.fields.file['de-DE'].url))\n\n// Publish an asset\nasset.publish()\n.then(asset => console.log(asset.sys.publishedVersion))\n\n// Delete an asset\nasset.delete()\n.catch(err => console.log(err))\n\n// unPublish an asset\nasset.unpublish()\n.then(asset => console.log(asset.sys))\n\n// archive an asset\nasset.archive()\n.then(asset => console.log(asset.sys.archivedVersion))\n\n// unarchive an asset\nasset.unarchive()\n.then(asset => console.log(asset.sys))"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "Standard system metadata with additional asset specific properties"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sys.locale",
        "description": "If present, indicates the locale which this asset uses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "Object with content for each field"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.title",
        "description": "Title for this asset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.description",
        "description": "Description for this asset"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.file",
        "description": "File object for this asset"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.file.fileName",
        "description": "Name for the file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.file.contentType",
        "description": "Mime type for the file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.file.upload",
        "description": "Url where the file is available to be downloaded from, into the Contentful asset system. After the asset is processed this field is gone."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.file.url",
        "description": "Url where the file is available at the Contentful media asset system. This field won't be available until the asset is processed."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields.file.details",
        "description": "Details for the file, depending on file type (example: image size in bytes, etc)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isPublished",
        "description": "checks if the asset is published. A published asset might have unpublished changes (@see {Asset.isUpdated})"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUpdated",
        "description": "Checks if the asset is updated. This means the asset was previously published but has unpublished changes."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isArchived",
        "description": "Checks if asset is archived. This means it's not exposed to the Delivery/Preview APIs."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDraft",
        "description": "Checks if the asset is in draft mode. This means it is not published."
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "Updates an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "delete",
        "description": "Deletes an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "publish",
        "description": "Publishes an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "unpublish",
        "description": "Unpublishes an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "archive",
        "description": "Archives an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "unarchive",
        "description": "Unarchives an asset"
      },
      {
        "nullable": null,
        "types": [
          "function(locale: string, options: {processingCheckWait: number, processingCheckRetries: number}): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "processForLocale",
        "description": "Triggers asset processing after an upload, for the file uploaded to a specific locale."
      },
      {
        "nullable": null,
        "types": [
          "function(options: {processingCheckWait: number, processingCheckRetries: number}): Promise<Asset>"
        ],
        "spread": false,
        "optional": false,
        "name": "processForAllLocales",
        "description": "Triggers asset processing after an upload, for the files uploaded to all locales of an asset."
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Asset as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "Asset"
      ],
      "optional": false,
      "name": "Asset"
    }
  },
  {
    "__docId__": 20,
    "kind": "typedef",
    "name": "AssetCollection",
    "memberof": "lib/entities/asset.js",
    "static": true,
    "longname": "lib/entities/asset.js~AssetCollection",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nlet space = await client.getSpace('SPACE_ID')\nlet assetCollection = await space.getAssets()\nconsole.log(\"the space contains \", assetCollection.items.length, \" assets\")\nassetCollection.items.forEach((asset) => {\n   // do something with asset @link {Asset}\n})"
    ],
    "lineNumber": 135,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "Asset[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "an array of assets"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Asset collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "AssetCollection"
      ],
      "optional": false,
      "name": "AssetCollection"
    }
  },
  {
    "__docId__": 21,
    "kind": "function",
    "name": "wrapAsset",
    "memberof": "lib/entities/asset.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/asset.js~wrapAsset",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/asset.js",
    "importStyle": "{wrapAsset}",
    "description": "",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw asset data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Asset"
      ],
      "spread": false,
      "description": "Wrapped asset data"
    }
  },
  {
    "__docId__": 22,
    "kind": "function",
    "name": "wrapAssetCollection",
    "memberof": "lib/entities/asset.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/asset.js~wrapAssetCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/asset.js",
    "importStyle": "{wrapAssetCollection}",
    "description": "",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw asset collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AssetCollection"
      ],
      "spread": false,
      "description": "Wrapped asset collection data"
    }
  },
  {
    "__docId__": 23,
    "kind": "file",
    "name": "lib/entities/content-type.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createUpdateEntity,\n  createDeleteEntity,\n  createPublishEntity,\n  createUnpublishEntity,\n  createPublishedChecker,\n  createUpdatedChecker,\n  createDraftChecker\n} from '../instance-actions'\nimport {wrapEditorInterface} from './editor-interface'\nimport errorHandler from '../error-handler'\n\n/**\n * @typedef {ContentType} ContentType\n * @property {Object} sys - System metadata\n * @property {string} name - name of the content type\n * @property {string} description - description of the content type\n * @property {string} displayField - Field used as the main display field for Entries\n * @property {Array<Field>} fields - All the fields contained in this Content Type\n * @property {boolean} isPublished - Checks if the content type is published. A published content type might have unpublished changes (@see {ContentType.isUpdated})\n * @property {boolean} isUpdated - Checks if the content type is updated. This means the content type was previously published but has unpublished changes.\n * @property {boolean} isDraft -  Checks if the content type is in draft mode. This means it is not published.\n * @property {function(): Promise<ContentType>} update - Updates a content type in the server\n * @property {function(): Promise<ContentType>} delete - Deletes a content type on the server\n * @property {function(): Promise<ContentType>} publish - Publishes a content type\n * @property {function(): Promise<ContentType>} unpublish - Unpublishes a content type\n * @property {function(): Object} toPlainObject() - Returns this Content Type as a plain JS object\n * @example\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * //=======================================================================================================\n * // You can get an Entry object by\n * //\n * // 1. Creating one\n * //\n * // var contentType = await space.createContentType({name: 'Post', fields: []})\n * //\n * // OR\n * //\n * // 2. Get an existing one\n * //\n * // var contentType = await space.getContentType('contentTypeId')\n * //=======================================================================================================\n *\n * // Example updating a ContentType\n * contentType.name = 'New name'\n * contentType.update()\n * .then(contentType => console.log(contentType.name))\n *\n * //Example deleting a content type\n * contentType.delete()\n * .catch(err => console.log(err))\n */\n\n/**\n * @typedef {ContentTypeCollection} ContentTypeCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {ContentType[]} items - An array of contentTypes\n * @property {function(): Object} toPlainObject - Returns this Content Type collection as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * var space = await client.getSpace('SPACE_ID')\n * //Example getting contentTypes\n * space.getContentTypes()\n *  .then(contentTypes => console.log(contentTypes.items))\n */\n\nfunction createContentTypeApi (http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof ContentType\n     * @func update\n     * @return {Promise<ContentType>} Object returned from the server with updated changes.\n     * @example\n     * contentType.name = 'New name'\n     * contentType.update()\n     * .then(contentType => console.log(contentType.name))\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof ContentType\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * contentType.delete()\n     * .catch(err => console.log(err))\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'content_types'\n    }),\n\n    /**\n     * Publishes the object\n     * @memberof ContentType\n     * @func publish\n     * @return {Promise<ContentType>} Object returned from the server with updated metadata.\n     * @example\n     * contentType.publish()\n     * .then(contentType => console.log(contentType.sys.publishedVersion))\n     */\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n\n    /**\n     * Unpublishes the object\n     * @memberof ContentType\n     * @func unpublish\n     * @return {Promise<ContentType>} Object returned from the server with updated metadata.\n     * @example\n     * contentType.unpublish()\n     * .then(contentType => console.log(contentType.sys))\n     */\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n\n    /**\n     * Gets the editor interface for the object <br />\n     * <strong>Important note</strong>: The editor interface only represent a published contentType.<br />\n     * To get the most recent representation of the contentType make sure to publish it first\n     * @memberof ContentType\n     * @func getEditorInterface\n     * @return {Promise<EditorInterface.EditorInterface>} Object returned from the server with the current editor interface.\n     * @example\n     * contentType.getEditorInterface()\n     * .then(editorInterface => console.log(editorInterface.controls))\n     */\n    getEditorInterface: function () {\n      return http.get('content_types/' + this.sys.id + '/editor_interface')\n      .then((response) => wrapEditorInterface(http, response.data), errorHandler)\n    },\n    /**\n     * Checks if the contentType is published. A published contentType might have unpublished changes (@see {ContentType.isUpdated})\n     * @memberof ContentType\n     * @func isPublished\n     * @return {boolean}\n     */\n    isPublished: createPublishedChecker(),\n\n    /**\n     * Checks if the contentType is updated. This means the contentType was previously published but has unpublished changes.\n     * @memberof ContentType\n     * @func isUpdated\n     * @return {boolean}\n     */\n    isUpdated: createUpdatedChecker(),\n\n    /**\n     * Checks if the contentType is in draft mode. This means it is not published.\n     * @memberof ContentType\n     * @func isDraft\n     * @return {boolean}\n     */\n    isDraft: createDraftChecker()\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw content type data\n * @return {ContentType} Wrapped content type data\n */\nexport function wrapContentType (http, data) {\n  const contentType = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(contentType, createContentTypeApi(http))\n  return freezeSys(contentType)\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw content type collection data\n * @return {ContentTypeCollection} Wrapped content type collection data\n */\nexport function wrapContentTypeCollection (http, data) {\n  const contentTypes = toPlainObject(cloneDeep(data))\n  contentTypes.items = contentTypes.items.map((entity) => wrapContentType(http, entity))\n  return freezeSys(contentTypes)\n}\n",
    "static": true,
    "longname": "lib/entities/content-type.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 24,
    "kind": "typedef",
    "name": "ContentType",
    "memberof": "lib/entities/content-type.js",
    "static": true,
    "longname": "lib/entities/content-type.js~ContentType",
    "access": null,
    "description": "",
    "examples": [
      "// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\n//=======================================================================================================\n// You can get an Entry object by\n//\n// 1. Creating one\n//\n// var contentType = await space.createContentType({name: 'Post', fields: []})\n//\n// OR\n//\n// 2. Get an existing one\n//\n// var contentType = await space.getContentType('contentTypeId')\n//=======================================================================================================\n\n// Example updating a ContentType\ncontentType.name = 'New name'\ncontentType.update()\n.then(contentType => console.log(contentType.name))\n\n//Example deleting a content type\ncontentType.delete()\n.catch(err => console.log(err))"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the content type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "description of the content type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "displayField",
        "description": "Field used as the main display field for Entries"
      },
      {
        "nullable": null,
        "types": [
          "Array<Field>"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "All the fields contained in this Content Type"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isPublished",
        "description": "Checks if the content type is published. A published content type might have unpublished changes (@see {ContentType.isUpdated})"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUpdated",
        "description": "Checks if the content type is updated. This means the content type was previously published but has unpublished changes."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDraft",
        "description": "Checks if the content type is in draft mode. This means it is not published."
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "Updates a content type in the server"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "delete",
        "description": "Deletes a content type on the server"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "publish",
        "description": "Publishes a content type"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<ContentType>"
        ],
        "spread": false,
        "optional": false,
        "name": "unpublish",
        "description": "Unpublishes a content type"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject()",
        "description": "Returns this Content Type as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "ContentType"
      ],
      "optional": false,
      "name": "ContentType"
    }
  },
  {
    "__docId__": 25,
    "kind": "typedef",
    "name": "ContentTypeCollection",
    "memberof": "lib/entities/content-type.js",
    "static": true,
    "longname": "lib/entities/content-type.js~ContentTypeCollection",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nvar space = await client.getSpace('SPACE_ID')\n//Example getting contentTypes\nspace.getContentTypes()\n .then(contentTypes => console.log(contentTypes.items))"
    ],
    "lineNumber": 85,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "ContentType[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of contentTypes"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Content Type collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "ContentTypeCollection"
      ],
      "optional": false,
      "name": "ContentTypeCollection"
    }
  },
  {
    "__docId__": 26,
    "kind": "function",
    "name": "wrapContentType",
    "memberof": "lib/entities/content-type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/content-type.js~wrapContentType",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/content-type.js",
    "importStyle": "{wrapContentType}",
    "description": "",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw content type data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ContentType"
      ],
      "spread": false,
      "description": "Wrapped content type data"
    }
  },
  {
    "__docId__": 27,
    "kind": "function",
    "name": "wrapContentTypeCollection",
    "memberof": "lib/entities/content-type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/content-type.js~wrapContentTypeCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/content-type.js",
    "importStyle": "{wrapContentTypeCollection}",
    "description": "",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw content type collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ContentTypeCollection"
      ],
      "spread": false,
      "description": "Wrapped content type collection data"
    }
  },
  {
    "__docId__": 28,
    "kind": "file",
    "name": "lib/entities/editor-interface.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport omit from 'lodash/omit'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport errorHandler from '../error-handler'\n/**\n * @typedef {Control} Control\n * @property {string} widgetId - defines how the field will look like e.g. singleLine\n * @property {string} fieldId - id of the field that this control is affecting\n * @property {Object} settings - settings for the widget\n */\n/**\n * @typedef {EditorInterface} EditorInterface\n * @property {Object} sys - System metadata\n * @property {Control[]} controls - List of settings per field\n * @property {function(): Promise<EditorInterface>} update - Sends an update to the server with any changes made to the object's properties\n * @property {function(): Control} getControlForField - Gets a control for a specific field\n * @property {function(): Object} toPlainObject() - Returns this Content Type as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * // request our space from Contentful\n * var space = await client.getSpace('SPACE_ID')\n *\n * //=======================================================================================================\n * // web can get an editor interface in two ways\n * // 1. request our ContentType from Contentful\n * //\n * // var contentType = await space.getContentType('CONTENT_TYPE_ID')\n * //\n * //1.1 Get the editorInterface through the ContentType\n * //\n * // var editorInterface = await contentType.getEditorInterface()\n * //\n * // OR\n * //\n * // 2. get an editor interface from the Space object right away\n * //\n * // var editorInterface = await space.getEditorInterfaceForContentType('CONTENT_TYPE_ID')\n * //=======================================================================================================\n *\n * // we'll use option 2\n *\n * var editorInterface = await space.getEditorInterfaceForContentType('CONTENT_TYPE_ID')\n *\n * // Example Updating  and editor interface\n * editorInterface.controls[0] = { \"fieldId\": \"title\", \"widgetId\": \"singleLine\"}\n * editorInterface.update()\n * .then(editorInterface => console.log(editorInterface.controls))\n */\n\nfunction createEditorInterfaceApi (http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof EditorInterface\n     * @func update\n     * @return {Promise<EditorInterface>} Object returned from the server with updated changes.\n     * @example\n     * editorInterface.controls[0] = { \"fieldId\": \"title\", \"widgetId\": \"singleLine\"}\n     * editorInterface.update()\n     * .then(editorInterface => console.log(editorInterface.controls))\n     */\n    update: function () {\n      const raw = this.toPlainObject()\n      const data = omit(raw, ['sys'])\n      return http.put(`content_types/${this.sys.contentType.sys.id}/editor_interface`,\n        data,\n        {\n          headers: {'X-Contentful-Version': this.sys.version}\n        }\n      )\n      .then((response) => wrapEditorInterface(http, response.data), errorHandler)\n    },\n    /**\n     * gets a control for a specific field\n     * @memberof EditorInterface\n     * @func getControlForField\n     * @return {?Object} control object for specific field.\n     * @example\n     * const control = editorInterface.getControlForField('fieldId')\n     * console.log(control)\n     */\n    getControlForField: function (fieldId) {\n      const result = this.controls.filter((control) => {\n        return control.fieldId === fieldId\n      })\n      return (result && result.length > 0) ? result[0] : null\n    }\n  }\n}\n\n/**\n* @private\n* @param {Object} http - HTTP client instance\n* @param {Object} data - Raw editor-interface data\n* @return {EditorInterface} Wrapped editor-interface data\n*/\nexport function wrapEditorInterface (http, data) {\n  const editorInterface = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(editorInterface, createEditorInterfaceApi(http))\n  return freezeSys(editorInterface)\n}\n",
    "static": true,
    "longname": "lib/entities/editor-interface.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 29,
    "kind": "typedef",
    "name": "Control",
    "memberof": "lib/entities/editor-interface.js",
    "static": true,
    "longname": "lib/entities/editor-interface.js~Control",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "widgetId",
        "description": "defines how the field will look like e.g. singleLine"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldId",
        "description": "id of the field that this control is affecting"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "settings for the widget"
      }
    ],
    "type": {
      "types": [
        "Control"
      ],
      "optional": false,
      "name": "Control"
    }
  },
  {
    "__docId__": 30,
    "kind": "typedef",
    "name": "EditorInterface",
    "memberof": "lib/entities/editor-interface.js",
    "static": true,
    "longname": "lib/entities/editor-interface.js~EditorInterface",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\n// request our space from Contentful\nvar space = await client.getSpace('SPACE_ID')\n\n//=======================================================================================================\n// web can get an editor interface in two ways\n// 1. request our ContentType from Contentful\n//\n// var contentType = await space.getContentType('CONTENT_TYPE_ID')\n//\n//1.1 Get the editorInterface through the ContentType\n//\n// var editorInterface = await contentType.getEditorInterface()\n//\n// OR\n//\n// 2. get an editor interface from the Space object right away\n//\n// var editorInterface = await space.getEditorInterfaceForContentType('CONTENT_TYPE_ID')\n//=======================================================================================================\n\n// we'll use option 2\n\nvar editorInterface = await space.getEditorInterfaceForContentType('CONTENT_TYPE_ID')\n\n// Example Updating  and editor interface\neditorInterface.controls[0] = { \"fieldId\": \"title\", \"widgetId\": \"singleLine\"}\neditorInterface.update()\n.then(editorInterface => console.log(editorInterface.controls))"
    ],
    "lineNumber": 58,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "Control[]"
        ],
        "spread": false,
        "optional": false,
        "name": "controls",
        "description": "List of settings per field"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<EditorInterface>"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "Sends an update to the server with any changes made to the object's properties"
      },
      {
        "nullable": null,
        "types": [
          "function(): Control"
        ],
        "spread": false,
        "optional": false,
        "name": "getControlForField",
        "description": "Gets a control for a specific field"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject()",
        "description": "Returns this Content Type as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "EditorInterface"
      ],
      "optional": false,
      "name": "EditorInterface"
    }
  },
  {
    "__docId__": 31,
    "kind": "function",
    "name": "wrapEditorInterface",
    "memberof": "lib/entities/editor-interface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/editor-interface.js~wrapEditorInterface",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/editor-interface.js",
    "importStyle": "{wrapEditorInterface}",
    "description": "",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw editor-interface data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EditorInterface"
      ],
      "spread": false,
      "description": "Wrapped editor-interface data"
    }
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "lib/entities/entry.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createUpdateEntity,\n  createDeleteEntity,\n  createPublishEntity,\n  createUnpublishEntity,\n  createArchiveEntity,\n  createUnarchiveEntity,\n  createPublishedChecker,\n  createUpdatedChecker,\n  createDraftChecker,\n  createArchivedChecker\n} from '../instance-actions'\n\n/**\n * @typedef {Entry} Entry\n * @property {Object} sys - Standard system metadata with additional entry specific properties\n * @property {Object} sys.contentType - Content Type used by this Entry\n * @property {string} sys.locale - If present, indicates the locale which this entry uses\n * @property {Object} fields - Object with content for each field\n * @property {boolean} isPublished - Checks if the entry is published. A published entry might have unpublished changes (@see {Entry.isUpdated})\n * @property {boolean} isUpdated - Checks if the entry is updated. This means the entry was previously published but has unpublished changes.\n * @property {boolean} isDraft -  Checks if the entry is in draft mode. This means it is not published.\n * @property {boolean} isArchived - Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.\n * @property {function(): Promise<Entry>} update - Updates an entry in the server\n * @property {function(): Promise<Entry>} delete - Deletes an entry on the server\n * @property {function(): Promise<Entry>} publish - Publishes an entry\n * @property {function(): Promise<Entry>} unpublish - Unpublishes an entry\n * @property {function(): Promise<Entry>} archive - Archives an entry\n * @property {function(): Promise<Entry>} unarchive - Unarchives an entry\n * @property {function(): Object} toPlainObject - Returns this Entry as a plain JS object\n * @example\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * //=======================================================================================================\n * // You can get an Entry object by\n * //\n * // 1. Creating one\n * //\n * // var entry = await space.createEntry({})\n * //\n * // OR\n * //\n * // 2. Get an existing one\n * //\n * // var entry = await space.getEntry('ENTRY_ID')\n * //=======================================================================================================\n *\n * // Example updating an entry\n * entry.fields.name['en-US'] = 'Blog Post'\n * entry.update()\n * .then(entry => console.log(entry.fields.name['en-US']))\n *\n * // Example deleting an entry\n * entry.delete()\n * .catch(err => console.log(err))\n *\n * // Example publish an entry\n * entry.publish()\n * .then(entry => console.log(entry.sys.publishedVersion))\n *\n * // Example unPublishing an entry\n * entry.unpublish()\n * .then(entry => console.log(entry.sys))\n *\n * // Example archiving an entry\n * entry.archive()\n * .then(entry => console.log(entry.sys.archivedVersion))\n *\n * // Example unarchiving an entry\n * entry.unarchive()\n * .then(entry => console.log(entry.sys))\n */\n\n/**\n * @typedef {EntryCollection} EntryCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {Entry[]} items - array of entries\n * @property {Array<Object>} errors - Array of errors that might occur when retrieving entries.\n * @property {function(): Object} toPlainObject - Returns this Entry collection as a plain JS object\n */\n\nfunction createEntryApi (http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Entry\n     * @func update\n     * @return {Promise<Entry>} Object returned from the server with updated changes.\n     * @example\n     * entry.fields.name['en-US'] = 'Blog Post'\n     * entry.update()\n     * .then(entry => console.log(entry.fields.name['en-US']))\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Entry\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * entry.delete()\n     * .catch(err => console.log(err))\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'entries'\n    }),\n\n    /**\n     * Publishes the object\n     * @memberof Entry\n     * @func publish\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * entry.publish()\n     * .then(entry => console.log(entry.sys.publishedVersion))\n     */\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Unpublishes the object\n     * @memberof Entry\n     * @func unpublish\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * entry.unpublish()\n     * .then(entry => console.log(entry.sys))\n     */\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Archives the object\n     * @memberof Entry\n     * @func archive\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * entry.archive()\n     * .then(entry => console.log(entry.sys.archivedVersion))\n     */\n    archive: createArchiveEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Unarchives the object\n     * @memberof Entry\n     * @func unarchive\n     * @return {Promise<Entry>} Object returned from the server with updated metadata.\n     * @example\n     * entry.unarchive()\n     * .then(entry => console.log(entry.sys))\n     */\n    unarchive: createUnarchiveEntity({\n      http: http,\n      entityPath: 'entries',\n      wrapperMethod: wrapEntry\n    }),\n\n    /**\n     * Checks if the entry is published. A published entry might have unpublished changes (@see {Entry.isUpdated})\n     * @memberof Entry\n     * @func isPublished\n     * @return {boolean}\n     */\n    isPublished: createPublishedChecker(),\n\n    /**\n     * Checks if the entry is updated. This means the entry was previously published but has unpublished changes.\n     * @memberof Entry\n     * @func isUpdated\n     * @return {boolean}\n     */\n    isUpdated: createUpdatedChecker(),\n\n    /**\n     * Checks if the entry is in draft mode. This means it is not published.\n     * @memberof Entry\n     * @func isDraft\n     * @return {boolean}\n     */\n    isDraft: createDraftChecker(),\n\n    /**\n     * Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.\n     * @memberof Entry\n     * @func isArchived\n     * @return {boolean}\n     */\n    isArchived: createArchivedChecker()\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw entry data\n * @return {Entry} Wrapped entry data\n */\nexport function wrapEntry (http, data) {\n  const entry = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(entry, createEntryApi(http))\n  return freezeSys(entry)\n}\n\n/**\n * Data is also mixed in with link getters if links exist and includes were requested\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw entry collection data\n * @return {EntryCollection} Wrapped entry collection data\n */\nexport function wrapEntryCollection (http, data, resolveLinks) {\n  const entries = toPlainObject(cloneDeep(data))\n  entries.items = entries.items.map((entity) => wrapEntry(http, entity))\n  return freezeSys(entries)\n}\n",
    "static": true,
    "longname": "lib/entities/entry.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "typedef",
    "name": "Entry",
    "memberof": "lib/entities/entry.js",
    "static": true,
    "longname": "lib/entities/entry.js~Entry",
    "access": null,
    "description": "",
    "examples": [
      "// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\n//=======================================================================================================\n// You can get an Entry object by\n//\n// 1. Creating one\n//\n// var entry = await space.createEntry({})\n//\n// OR\n//\n// 2. Get an existing one\n//\n// var entry = await space.getEntry('ENTRY_ID')\n//=======================================================================================================\n\n// Example updating an entry\nentry.fields.name['en-US'] = 'Blog Post'\nentry.update()\n.then(entry => console.log(entry.fields.name['en-US']))\n\n// Example deleting an entry\nentry.delete()\n.catch(err => console.log(err))\n\n// Example publish an entry\nentry.publish()\n.then(entry => console.log(entry.sys.publishedVersion))\n\n// Example unPublishing an entry\nentry.unpublish()\n.then(entry => console.log(entry.sys))\n\n// Example archiving an entry\nentry.archive()\n.then(entry => console.log(entry.sys.archivedVersion))\n\n// Example unarchiving an entry\nentry.unarchive()\n.then(entry => console.log(entry.sys))"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "Standard system metadata with additional entry specific properties"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys.contentType",
        "description": "Content Type used by this Entry"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sys.locale",
        "description": "If present, indicates the locale which this entry uses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "Object with content for each field"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isPublished",
        "description": "Checks if the entry is published. A published entry might have unpublished changes (@see {Entry.isUpdated})"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUpdated",
        "description": "Checks if the entry is updated. This means the entry was previously published but has unpublished changes."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDraft",
        "description": "Checks if the entry is in draft mode. This means it is not published."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isArchived",
        "description": "Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs."
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "Updates an entry in the server"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "delete",
        "description": "Deletes an entry on the server"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "publish",
        "description": "Publishes an entry"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "unpublish",
        "description": "Unpublishes an entry"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "archive",
        "description": "Archives an entry"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise<Entry>"
        ],
        "spread": false,
        "optional": false,
        "name": "unarchive",
        "description": "Unarchives an entry"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Entry as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "Entry"
      ],
      "optional": false,
      "name": "Entry"
    }
  },
  {
    "__docId__": 34,
    "kind": "typedef",
    "name": "EntryCollection",
    "memberof": "lib/entities/entry.js",
    "static": true,
    "longname": "lib/entities/entry.js~EntryCollection",
    "access": null,
    "description": "",
    "lineNumber": 92,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "Entry[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "array of entries"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "errors",
        "description": "Array of errors that might occur when retrieving entries."
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Entry collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "EntryCollection"
      ],
      "optional": false,
      "name": "EntryCollection"
    }
  },
  {
    "__docId__": 35,
    "kind": "function",
    "name": "wrapEntry",
    "memberof": "lib/entities/entry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/entry.js~wrapEntry",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/entry.js",
    "importStyle": "{wrapEntry}",
    "description": "",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw entry data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entry"
      ],
      "spread": false,
      "description": "Wrapped entry data"
    }
  },
  {
    "__docId__": 36,
    "kind": "function",
    "name": "wrapEntryCollection",
    "memberof": "lib/entities/entry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/entry.js~wrapEntryCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/entry.js",
    "importStyle": "{wrapEntryCollection}",
    "description": "Data is also mixed in with link getters if links exist and includes were requested",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw entry collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EntryCollection"
      ],
      "spread": false,
      "description": "Wrapped entry collection data"
    }
  },
  {
    "__docId__": 37,
    "kind": "file",
    "name": "lib/entities/index.js",
    "content": "import * as space from './space'\nimport * as entry from './entry'\nimport * as asset from './asset'\nimport * as contentType from './content-type'\nimport * as editorInterface from './editor-interface'\nimport * as locale from './locale'\nimport * as webhook from './webhook'\nimport * as spaceMembership from './space-membership'\nimport * as role from './role'\nimport * as apiKey from './api-key'\nimport * as upload from './upload'\n\nexport default {\n  space,\n  entry,\n  asset,\n  contentType,\n  editorInterface,\n  locale,\n  webhook,\n  spaceMembership,\n  role,\n  apiKey,\n  upload\n}\n",
    "static": true,
    "longname": "lib/entities/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 38,
    "kind": "file",
    "name": "lib/entities/locale.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createUpdateEntity,\n  createDeleteEntity\n} from '../instance-actions'\n\n/**\n * @typedef {Locale} Locale\n * @property {Object} sys - System metadata\n * @property {string} name\n * @property {string} code - Locale code (example: en-us)\n * @property {boolean} contentDeliveryApi - If the content under this locale should be available on the CDA (for public reading)\n * @property {boolean} contentManagementApi - If the content under this locale should be available on the CMA (for editing)\n * @property {boolean} default - If this is the default locale\n * @property {boolean} optional - If the locale needs to be filled in on entries or not\n * @property {function(): Object} toPlainObject - Returns this Locale as a plain JS object\n */\n\n/**\n * @typedef {LocaleCollection} LocaleCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {Array<Locale>} items - array of locales\n * @property {function(): Object} toPlainObject - Returns this Locale collection as a plain JS object\n */\n\nfunction createLocaleApi (http) {\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Locale\n     * @func update\n     * @return {Promise<Locale>} Object returned from the server with updated changes.\n     * @example\n     * locale.name = 'English'\n     * locale.update()\n     * .then(locale => console.log(locale.name))\n     */\n    update: function () {\n      const locale = this\n      // this property shouldn't be sent back if it exists\n      delete locale.default\n      delete locale.fallback_code\n      delete locale.fallbackCode\n      return createUpdateEntity({\n        http: http,\n        entityPath: 'locales',\n        wrapperMethod: wrapLocale\n      }).call(locale)\n    },\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Locale\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * locale.delete()\n     * .catch(err => console.log(err))\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'locales'\n    })\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw locale data\n * @return {Locale} Wrapped locale data\n */\nexport function wrapLocale (http, data) {\n  delete data.internal_code\n  const locale = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(locale, createLocaleApi(http))\n  return freezeSys(locale)\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw locale collection data\n * @return {LocaleCollection} Wrapped locale collection data\n */\nexport function wrapLocaleCollection (http, data) {\n  const locales = toPlainObject(cloneDeep(data))\n  locales.items = locales.items.map((entity) => wrapLocale(http, entity))\n  return freezeSys(locales)\n}\n",
    "static": true,
    "longname": "lib/entities/locale.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 39,
    "kind": "typedef",
    "name": "Locale",
    "memberof": "lib/entities/locale.js",
    "static": true,
    "longname": "lib/entities/locale.js~Locale",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Locale code (example: en-us)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "contentDeliveryApi",
        "description": "If the content under this locale should be available on the CDA (for public reading)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "contentManagementApi",
        "description": "If the content under this locale should be available on the CMA (for editing)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "default",
        "description": "If this is the default locale"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "optional",
        "description": "If the locale needs to be filled in on entries or not"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Locale as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "Locale"
      ],
      "optional": false,
      "name": "Locale"
    }
  },
  {
    "__docId__": 40,
    "kind": "typedef",
    "name": "LocaleCollection",
    "memberof": "lib/entities/locale.js",
    "static": true,
    "longname": "lib/entities/locale.js~LocaleCollection",
    "access": null,
    "description": "",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "Array<Locale>"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "array of locales"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Locale collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "LocaleCollection"
      ],
      "optional": false,
      "name": "LocaleCollection"
    }
  },
  {
    "__docId__": 41,
    "kind": "function",
    "name": "wrapLocale",
    "memberof": "lib/entities/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/locale.js~wrapLocale",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/locale.js",
    "importStyle": "{wrapLocale}",
    "description": "",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw locale data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locale"
      ],
      "spread": false,
      "description": "Wrapped locale data"
    }
  },
  {
    "__docId__": 42,
    "kind": "function",
    "name": "wrapLocaleCollection",
    "memberof": "lib/entities/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/locale.js~wrapLocaleCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/locale.js",
    "importStyle": "{wrapLocaleCollection}",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw locale collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LocaleCollection"
      ],
      "spread": false,
      "description": "Wrapped locale collection data"
    }
  },
  {
    "__docId__": 43,
    "kind": "file",
    "name": "lib/entities/role.js",
    "content": "/**\n * Role instances\n * @namespace Role\n */\nimport cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createUpdateEntity,\n  createDeleteEntity\n} from '../instance-actions'\n\n/**\n * @see https://www.contentful.com/developers/docs/references/content-management-api/#/reference/roles/create-a-role\n * @typedef {Role} Role\n * @property {Object} sys - System metadata\n * @property {string} name\n * @property {Object} permissions - Permissions for application sections\n * @property {Object} policies\n * @property {function(): Prmise<Role>} update - Sends an update to the server with any changes made to the object's properties\n * @property {function(): Prmise} delete - Deletes this object on the server.\n * @property {function(): Object} toPlainObject - Returns this Role as a plain JS object\n */\n\n/**\n * @typedef {RoleCollection} RoleCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {Role[]} items - an array of roles\n * @property {function(): Object} toPlainObject - Returns this Role collection as a plain JS object\n */\n\nfunction createRoleApi (http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Role\n     * @func update\n     * @return {Promise<Role>} Object returned from the server with updated changes.\n     * @example\n     * role.name = 'New name'\n     * role.update()\n     * .then(role => console.log(role.name))\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'roles',\n      wrapperMethod: wrapRole\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Role\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * role.delete()\n     * .catch(err => console.log(err))\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'roles'\n    })\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw role data\n * @return {Role} Wrapped role data\n */\nexport function wrapRole (http, data) {\n  const role = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(role, createRoleApi(http))\n  return freezeSys(role)\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw role collection data\n * @return {RoleCollection} Wrapped role collection data\n */\nexport function wrapRoleCollection (http, data) {\n  const roles = toPlainObject(cloneDeep(data))\n  roles.items = roles.items.map((entity) => wrapRole(http, entity))\n  return freezeSys(roles)\n}\n",
    "static": true,
    "longname": "lib/entities/role.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 44,
    "kind": "typedef",
    "name": "Role",
    "memberof": "lib/entities/role.js",
    "static": true,
    "longname": "lib/entities/role.js~Role",
    "access": null,
    "description": "",
    "see": [
      "https://www.contentful.com/developers/docs/references/content-management-api/#/reference/roles/create-a-role"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "permissions",
        "description": "Permissions for application sections"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "policies",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(): Prmise<Role>"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "Sends an update to the server with any changes made to the object's properties"
      },
      {
        "nullable": null,
        "types": [
          "function(): Prmise"
        ],
        "spread": false,
        "optional": false,
        "name": "delete",
        "description": "Deletes this object on the server."
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Role as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "Role"
      ],
      "optional": false,
      "name": "Role"
    }
  },
  {
    "__docId__": 45,
    "kind": "typedef",
    "name": "RoleCollection",
    "memberof": "lib/entities/role.js",
    "static": true,
    "longname": "lib/entities/role.js~RoleCollection",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "Role[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "an array of roles"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Role collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "RoleCollection"
      ],
      "optional": false,
      "name": "RoleCollection"
    }
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "wrapRole",
    "memberof": "lib/entities/role.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/role.js~wrapRole",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/role.js",
    "importStyle": "{wrapRole}",
    "description": "",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw role data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Role"
      ],
      "spread": false,
      "description": "Wrapped role data"
    }
  },
  {
    "__docId__": 47,
    "kind": "function",
    "name": "wrapRoleCollection",
    "memberof": "lib/entities/role.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/role.js~wrapRoleCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/role.js",
    "importStyle": "{wrapRoleCollection}",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw role collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoleCollection"
      ],
      "spread": false,
      "description": "Wrapped role collection data"
    }
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/entities/space-membership.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createUpdateEntity,\n  createDeleteEntity\n} from '../instance-actions'\n\n/**\n * @typedef {SpaceMembership} SpaceMembership\n * @property {Object} sys - System metadata\n * @property {string} name\n * @property {boolean} admin - User is an admin\n * @property {Array} roles - Array of Role Links\n * @property {function(): Object} toPlainObject - Returns this Space Membership as a plain JS object\n */\n\n/**\n * @typedef {SpaceMembershipCollection} SpaceMembershipCollection\n * @property {number} total - Total amount of records in the server\n * @property {number} skip - A starting point of the collection\n * @property {number} limit - Amount of records in collection\n * @property {Array<SpaceMembership.SpaceMembership>} items\n * @property {function(): Object} toPlainObject() - Returns this Space Membership collection as a plain JS object\n */\n\nfunction createSpaceMembershipApi (http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof SpaceMembership\n     * @func update\n     * @return {Promise<SpaceMembership>} Object returned from the server with updated changes.\n     * @example\n     * spaceMembership.name = 'New name'\n     * spaceMembership.update()\n     * .then(spaceMembership => console.log(spaceMembership.name))\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'space_memberships',\n      wrapperMethod: wrapSpaceMembership\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof SpaceMembership\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * spaceMembership.delete()\n     * .catch(err => console.log(err))\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'space_memberships'\n    })\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw space membership data\n * @return {SpaceMembership} Wrapped space membership data\n */\nexport function wrapSpaceMembership (http, data) {\n  const spaceMembership = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(spaceMembership, createSpaceMembershipApi(http))\n  return freezeSys(spaceMembership)\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw space membership collection data\n * @return {SpaceMembershipCollection} Wrapped space membership collection data\n */\nexport function wrapSpaceMembershipCollection (http, data) {\n  const spaceMemberships = toPlainObject(cloneDeep(data))\n  spaceMemberships.items = spaceMemberships.items.map((entity) => wrapSpaceMembership(http, entity))\n  return freezeSys(spaceMemberships)\n}\n",
    "static": true,
    "longname": "lib/entities/space-membership.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "typedef",
    "name": "SpaceMembership",
    "memberof": "lib/entities/space-membership.js",
    "static": true,
    "longname": "lib/entities/space-membership.js~SpaceMembership",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "System metadata"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "admin",
        "description": "User is an admin"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "roles",
        "description": "Array of Role Links"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Space Membership as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "SpaceMembership"
      ],
      "optional": false,
      "name": "SpaceMembership"
    }
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "SpaceMembershipCollection",
    "memberof": "lib/entities/space-membership.js",
    "static": true,
    "longname": "lib/entities/space-membership.js~SpaceMembershipCollection",
    "access": null,
    "description": "",
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total",
        "description": "Total amount of records in the server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skip",
        "description": "A starting point of the collection"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "Amount of records in collection"
      },
      {
        "nullable": null,
        "types": [
          "Array<SpaceMembership.SpaceMembership>"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject()",
        "description": "Returns this Space Membership collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "SpaceMembershipCollection"
      ],
      "optional": false,
      "name": "SpaceMembershipCollection"
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "wrapSpaceMembership",
    "memberof": "lib/entities/space-membership.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/space-membership.js~wrapSpaceMembership",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/space-membership.js",
    "importStyle": "{wrapSpaceMembership}",
    "description": "",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw space membership data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SpaceMembership"
      ],
      "spread": false,
      "description": "Wrapped space membership data"
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "wrapSpaceMembershipCollection",
    "memberof": "lib/entities/space-membership.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/space-membership.js~wrapSpaceMembershipCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/space-membership.js",
    "importStyle": "{wrapSpaceMembershipCollection}",
    "description": "",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw space membership collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SpaceMembershipCollection"
      ],
      "spread": false,
      "description": "Wrapped space membership collection data"
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "lib/entities/space.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport {freezeSys, toPlainObject} from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport createSpaceApi from '../create-space-api'\n\n/**\n * This method creates the API for the given space with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a space id, so the base path for requests now has the\n * space id already set.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Space\n * @return {Space}\n */\nexport function wrapSpace (http, data) {\n  const space = toPlainObject(cloneDeep(data))\n  const {\n    hostUpload,\n    defaultHostnameUpload\n  } = http.httpClientParams\n  const spaceScopedHttpClient = http.cloneWithNewParams({\n    space: space.sys.id\n  })\n  const spaceScopedUploadClient = http.cloneWithNewParams({\n    space: space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  })\n  const spaceApi = createSpaceApi({\n    http: spaceScopedHttpClient,\n    httpUpload: spaceScopedUploadClient\n  })\n  const enhancedSpace = enhanceWithMethods(space, spaceApi)\n  return freezeSys(enhancedSpace)\n}\n\n/**\n * This method wraps each space in a collection with the space API. See wrapSpace\n * above for more details.\n * @private\n * @param  {Object} http - HTTP client instance\n * @param  {Object} data - API response for a Space collection\n * @return {SpaceCollection}\n */\nexport function wrapSpaceCollection (http, data) {\n  const spaces = toPlainObject(cloneDeep(data))\n  spaces.items = spaces.items.map((entity) => wrapSpace(http, entity))\n  return freezeSys(spaces)\n}\n",
    "static": true,
    "longname": "lib/entities/space.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "wrapSpace",
    "memberof": "lib/entities/space.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/space.js~wrapSpace",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/space.js",
    "importStyle": "{wrapSpace}",
    "description": "This method creates the API for the given space with all the methods for\nreading and creating other entities. It also passes down a clone of the\nhttp client with a space id, so the base path for requests now has the\nspace id already set.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "API response for a Space"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Space"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "wrapSpaceCollection",
    "memberof": "lib/entities/space.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/space.js~wrapSpaceCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/space.js",
    "importStyle": "{wrapSpaceCollection}",
    "description": "This method wraps each space in a collection with the space API. See wrapSpace\nabove for more details.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "API response for a Space collection"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SpaceCollection"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "lib/entities/upload.js",
    "content": "import cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport {\n  createDeleteEntity\n} from '../instance-actions'\n\n/**\n * @typedef {Upload} Upload\n * @property {Object} sys - Standard system metadata with additional asset specific properties\n * @property {string} sys.id - The id of the upload\n * @property {function(): Promise} delete - Deletes an upload\n * @property {function(): Object} toPlainObject - Returns this Asset as a plain JS object\n * @example\n *\n * // require contentful-management\n * var contentfulManagement = require('contentful-management')\n * var client = contentfulManagement.createClient({\n * // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n * accessToken: 'YOUR_ACCESS_TOKEN'\n * })\n *\n * var space = await client.getSpace('SPACE_ID')\n * const uploadStream = createReadStream('path/to/filename_english.jpg')\n * space.createUpload(uploadStream)\n * .then((upload) => {\n *   // Delete upload again\n *   return upload.delete()\n * })\n * .catch(err => console.log(err))\n */\n\nfunction createUploadApi (http) {\n  return {\n    /**\n     * Deletes this object on the server.\n     * @memberof Upload\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'uploads'\n    })\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw upload data\n * @return {Asset} Wrapped upload data\n */\nexport function wrapUpload (http, data) {\n  const upload = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(upload, createUploadApi(http))\n  return freezeSys(upload)\n}\n",
    "static": true,
    "longname": "lib/entities/upload.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "Upload",
    "memberof": "lib/entities/upload.js",
    "static": true,
    "longname": "lib/entities/upload.js~Upload",
    "access": null,
    "description": "",
    "examples": [
      "\n// require contentful-management\nvar contentfulManagement = require('contentful-management')\nvar client = contentfulManagement.createClient({\n// This is the access token for this space. Normally you get both ID and the token in the Contentful web app\naccessToken: 'YOUR_ACCESS_TOKEN'\n})\n\nvar space = await client.getSpace('SPACE_ID')\nconst uploadStream = createReadStream('path/to/filename_english.jpg')\nspace.createUpload(uploadStream)\n.then((upload) => {\n  // Delete upload again\n  return upload.delete()\n})\n.catch(err => console.log(err))"
    ],
    "lineNumber": 33,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "Standard system metadata with additional asset specific properties"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sys.id",
        "description": "The id of the upload"
      },
      {
        "nullable": null,
        "types": [
          "function(): Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "delete",
        "description": "Deletes an upload"
      },
      {
        "nullable": null,
        "types": [
          "function(): Object"
        ],
        "spread": false,
        "optional": false,
        "name": "toPlainObject",
        "description": "Returns this Asset as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "Upload"
      ],
      "optional": false,
      "name": "Upload"
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "wrapUpload",
    "memberof": "lib/entities/upload.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/upload.js~wrapUpload",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/upload.js",
    "importStyle": "{wrapUpload}",
    "description": "",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw upload data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Asset"
      ],
      "spread": false,
      "description": "Wrapped upload data"
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "lib/entities/webhook.js",
    "content": "/**\n * Webhook instances\n * @namespace Webhook\n */\nimport cloneDeep from 'lodash/cloneDeep'\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core'\nimport enhanceWithMethods from '../enhance-with-methods'\nimport errorHandler from '../error-handler'\nimport {\n  createUpdateEntity,\n  createDeleteEntity\n} from '../instance-actions'\n\n/**\n * @memberof Webhook\n * @typedef Webhook\n * @prop {Meta.Sys} sys - System metadata\n * @prop {string} name\n * @prop {string} url - Url which the webhook will call\n * @prop {string} httpBasicUsername - Username for basic HTTP authentication\n * @prop {string} httpBasicPassword - Password for basic HTTP authentication\n * @prop {object} headers - Key value pairs of additional headers to be sent with every webhook call.\n * @prop {array} topics - Topics which this webhook should be subscribed to. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhooks/create-a-webhook for more details\n * @prop {function(): Object} toPlainObject() - Returns this Webhook as a plain JS object\n */\n\nfunction createWebhookApi (http) {\n  return {\n\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @memberof Webhook\n     * @func update\n     * @return {Promise<Webhook>} Object returned from the server with updated changes.\n     * @example\n     * webhook.name = 'New name'\n     * webhook.update()\n     * .then(webhook => console.log(webhook.name))\n     */\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'webhook_definitions',\n      wrapperMethod: wrapWebhook\n    }),\n\n    /**\n     * Deletes this object on the server.\n     * @memberof Webhook\n     * @func delete\n     * @return {Promise} Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example\n     * webhook.delete()\n     * .catch(err => console.log(err))\n     */\n    delete: createDeleteEntity({\n      http: http,\n      entityPath: 'webhook_definitions'\n    }),\n\n    /**\n     * List of the most recent webhook calls. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details.\n     * @memberof Webhook\n     * @func getCalls\n     * @return {Promise<object>} Promise for list of calls\n     * @example\n     * webhook.getCalls()\n     * .then(calls => console.log(calls.items))\n     */\n    getCalls: function () {\n      return http.get('webhooks/' + this.sys.id + '/calls')\n      .then((response) => response.data, errorHandler)\n    },\n\n    /**\n     * Webhook call with specific id. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details\n     * @memberof Webhook\n     * @func getCalls\n     * @return {Promise<object>} Promise for call details\n     * @example\n     * webhook.getCall('kjsdk1jeasd')\n     * .then(call => console.log(call))\n     */\n    getCall: function (id) {\n      return http.get('webhooks/' + this.sys.id + '/calls/' + id)\n      .then((response) => response.data, errorHandler)\n    },\n\n    /**\n     * Overview of the health of webhook calls. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhook-calls/webhook-call-overviews for more details.\n     * @memberof Webhook\n     * @func getHealth\n     * @return {Promise<object>} Promise for health info\n     * @example\n     * webhook.getHealth()\n     * .then(health => console.log(health))\n     */\n    getHealth: function () {\n      return http.get('webhooks/' + this.sys.id + '/health')\n      .then((response) => response.data, errorHandler)\n    }\n  }\n}\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw webhook data\n * @return {Webhook} Wrapped webhook data\n */\nexport function wrapWebhook (http, data) {\n  const webhook = toPlainObject(cloneDeep(data))\n  enhanceWithMethods(webhook, createWebhookApi(http))\n  return freezeSys(webhook)\n}\n\n/**\n * @memberof Webhook\n * @typedef WebhookCollection\n * @prop {number} total\n * @prop {number} skip\n * @prop {number} limit\n * @prop {Array<Webhook.Webhook>} items\n * @prop {function(): Object} toPlainObject() - Returns this Webhook collection as a plain JS object\n */\n\n/**\n * @private\n * @param {Object} http - HTTP client instance\n * @param {Object} data - Raw webhook collection data\n * @return {WebhookCollection} Wrapped webhook collection data\n */\nexport function wrapWebhookCollection (http, data) {\n  const webhooks = toPlainObject(cloneDeep(data))\n  webhooks.items = webhooks.items.map((entity) => wrapWebhook(http, entity))\n  return freezeSys(webhooks)\n}\n",
    "static": true,
    "longname": "lib/entities/webhook.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "typedef",
    "name": "Webhook",
    "memberof": "lib/entities/webhook.js",
    "static": true,
    "longname": "lib/entities/webhook.js~Webhook",
    "access": null,
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Meta.Sys} sys - System metadata"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} url - Url which the webhook will call"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} httpBasicUsername - Username for basic HTTP authentication"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} httpBasicPassword - Password for basic HTTP authentication"
      },
      {
        "tagName": "@prop",
        "tagValue": "{object} headers - Key value pairs of additional headers to be sent with every webhook call."
      },
      {
        "tagName": "@prop",
        "tagValue": "{array} topics - Topics which this webhook should be subscribed to. See https://www.contentful.com/developers/docs/references/content-management-api/#/reference/webhooks/create-a-webhook for more details"
      },
      {
        "tagName": "@prop",
        "tagValue": "{function(): Object} toPlainObject() - Returns this Webhook as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Webhook"
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "wrapWebhook",
    "memberof": "lib/entities/webhook.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/webhook.js~wrapWebhook",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/webhook.js",
    "importStyle": "{wrapWebhook}",
    "description": "",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw webhook data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Webhook"
      ],
      "spread": false,
      "description": "Wrapped webhook data"
    }
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "WebhookCollection",
    "memberof": "lib/entities/webhook.js",
    "static": true,
    "longname": "lib/entities/webhook.js~WebhookCollection",
    "access": null,
    "description": "",
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} total"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} skip"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} limit"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array<Webhook.Webhook>} items"
      },
      {
        "tagName": "@prop",
        "tagValue": "{function(): Object} toPlainObject() - Returns this Webhook collection as a plain JS object"
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "WebhookCollection"
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "wrapWebhookCollection",
    "memberof": "lib/entities/webhook.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/entities/webhook.js~wrapWebhookCollection",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/entities/webhook.js",
    "importStyle": "{wrapWebhookCollection}",
    "description": "",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "HTTP client instance"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Raw webhook collection data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WebhookCollection"
      ],
      "spread": false,
      "description": "Wrapped webhook collection data"
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "lib/error-handler.js",
    "content": "import isObject from 'lodash/isObject'\n\n/**\n * @typedef {ErrorResponse} ErrorResponse\n * @property {string} name - Error name. Usually refers to the sys.id returned on the\n * error server response. If that's not available or is unknown, it defaults to\n * the HTTP error code and status text.\n * @property {string} message - Stringified JSON object with request information,\n * HTTP response details and error details payload (if available). The `requestId`\n * property is internal to Contentful and it can be used when contacting support\n * about unusual errors.\n */\n\n/**\n * Handles errors received from the server. Parses the error into a more useful\n * format, places it in an exception and throws it.\n * See https://www.contentful.com/developers/docs/references/content-management-api/#/introduction/errors\n * for more details on the data received on the errorResponse.data property\n * and the expected error codes.\n * @private\n * @param {Object} errorResponse - Error received from an axios request\n * @throws {ErrorResponse}\n */\nexport default function errorHandler (errorResponse) {\n  const {config, response} = errorResponse\n  let errorName\n\n  if (!isObject(response) || !isObject(config)) {\n    throw errorResponse\n  }\n\n  const { data } = response\n\n  const errorData = {\n    status: response.status,\n    statusText: response.statusText,\n    message: '',\n    details: {}\n  }\n\n  // Obscure the Management token\n  if (config.headers && config.headers['Authorization']) {\n    config.headers['Authorization'] = 'Bearer ACCESS_TOKEN'\n  }\n  if (isObject(config)) {\n    errorData.request = {\n      url: config.url,\n      headers: config.headers,\n      method: config.method,\n      payloadData: config.data\n    }\n  }\n  if (isObject(data)) {\n    if ('requestId' in data) {\n      errorData.requestId = data.requestId || 'UNKNOWN'\n    }\n    if ('message' in data) {\n      errorData.message = data.message || ''\n    }\n    if ('details' in data) {\n      errorData.details = data.details || {}\n    }\n    if ('sys' in data) {\n      if ('id' in data.sys) {\n        errorName = data.sys.id\n      }\n    }\n  }\n\n  const error = new Error()\n  error.name = errorName && errorName !== 'Unknown' ? errorName : `${response.status} ${response.statusText}`\n  error.message = JSON.stringify(errorData, null, '  ')\n  throw error\n}\n",
    "static": true,
    "longname": "lib/error-handler.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "typedef",
    "name": "ErrorResponse",
    "memberof": "lib/error-handler.js",
    "static": true,
    "longname": "lib/error-handler.js~ErrorResponse",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Error name. Usually refers to the sys.id returned on the\nerror server response. If that's not available or is unknown, it defaults to\nthe HTTP error code and status text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Stringified JSON object with request information,\nHTTP response details and error details payload (if available). The `requestId`\nproperty is internal to Contentful and it can be used when contacting support\nabout unusual errors."
      }
    ],
    "type": {
      "types": [
        "ErrorResponse"
      ],
      "optional": false,
      "name": "ErrorResponse"
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "errorHandler",
    "memberof": "lib/error-handler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/error-handler.js~errorHandler",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/error-handler.js",
    "importStyle": "errorHandler",
    "description": "Handles errors received from the server. Parses the error into a more useful\nformat, places it in an exception and throws it.\nSee https://www.contentful.com/developers/docs/references/content-management-api/#/introduction/errors\nfor more details on the data received on the errorResponse.data property\nand the expected error codes.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "errorResponse",
        "description": "Error received from an axios request"
      }
    ],
    "throws": [
      {
        "types": [
          "ErrorResponse"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "lib/instance-actions.js",
    "content": "import omit from 'lodash/omit'\nimport errorHandler from './error-handler'\n/**\n * @private\n */\nexport function createUpdateEntity ({http, entityPath, wrapperMethod}) {\n  return function () {\n    const raw = this.toPlainObject()\n    const data = omit(raw, ['sys'])\n    return http.put(entityPath + '/' + this.sys.id, data, {\n      headers: {\n        'X-Contentful-Version': this.sys.version\n      }\n    })\n    .then((response) => wrapperMethod(http, response.data), errorHandler)\n  }\n}\n\n/**\n * @private\n */\nexport function createDeleteEntity ({http, entityPath}) {\n  return function () {\n    return http.delete(entityPath + '/' + this.sys.id)\n    .then((response) => {}, errorHandler)\n  }\n}\n\n/**\n * @private\n */\nexport function createPublishEntity ({http, entityPath, wrapperMethod}) {\n  return function () {\n    return http.put(entityPath + '/' + this.sys.id + '/published', null, {\n      headers: {\n        'X-Contentful-Version': this.sys.version\n      }\n    })\n    .then((response) => wrapperMethod(http, response.data), errorHandler)\n  }\n}\n\n/**\n * @private\n */\nexport function createUnpublishEntity ({http, entityPath, wrapperMethod}) {\n  return function () {\n    return http.delete(entityPath + '/' + this.sys.id + '/published')\n    .then((response) => wrapperMethod(http, response.data), errorHandler)\n  }\n}\n\n/**\n * @private\n */\nexport function createArchiveEntity ({http, entityPath, wrapperMethod}) {\n  return function () {\n    return http.put(entityPath + '/' + this.sys.id + '/archived')\n    .then((response) => wrapperMethod(http, response.data), errorHandler)\n  }\n}\n\n/**\n * @private\n */\nexport function createUnarchiveEntity ({http, entityPath, wrapperMethod}) {\n  return function () {\n    return http.delete(entityPath + '/' + this.sys.id + '/archived')\n    .then((response) => wrapperMethod(http, response.data), errorHandler)\n  }\n}\n\n/**\n * @private\n */\nexport function createPublishedChecker () {\n  return function () {\n    return !!this.sys.publishedVersion\n  }\n}\n\n/**\n * @private\n */\nexport function createUpdatedChecker () {\n  return function () {\n    // The act of publishing an entity increases its version by 1, so any entry which has\n    // 2 versions higher or more than the publishedVersion has unpublished changes.\n    return this.sys.publishedVersion && this.sys.version > this.sys.publishedVersion + 1\n  }\n}\n\n/**\n * @private\n */\nexport function createDraftChecker () {\n  return function () {\n    return !this.sys.publishedVersion\n  }\n}\n\n/**\n * @private\n */\nexport function createArchivedChecker () {\n  return function () {\n    return !!this.sys.archivedVersion\n  }\n}\n",
    "static": true,
    "longname": "lib/instance-actions.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "createUpdateEntity",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createUpdateEntity",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createUpdateEntity}",
    "description": "",
    "lineNumber": 6,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"http\": *, \"entityPath\": *, \"wrapperMethod\": *}"
        ],
        "defaultRaw": {
          "http": null,
          "entityPath": null,
          "wrapperMethod": null
        },
        "defaultValue": "{\"http\":null,\"entityPath\":null,\"wrapperMethod\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "createDeleteEntity",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createDeleteEntity",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createDeleteEntity}",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"http\": *, \"entityPath\": *}"
        ],
        "defaultRaw": {
          "http": null,
          "entityPath": null
        },
        "defaultValue": "{\"http\":null,\"entityPath\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "createPublishEntity",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createPublishEntity",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createPublishEntity}",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"http\": *, \"entityPath\": *, \"wrapperMethod\": *}"
        ],
        "defaultRaw": {
          "http": null,
          "entityPath": null,
          "wrapperMethod": null
        },
        "defaultValue": "{\"http\":null,\"entityPath\":null,\"wrapperMethod\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "createUnpublishEntity",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createUnpublishEntity",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createUnpublishEntity}",
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"http\": *, \"entityPath\": *, \"wrapperMethod\": *}"
        ],
        "defaultRaw": {
          "http": null,
          "entityPath": null,
          "wrapperMethod": null
        },
        "defaultValue": "{\"http\":null,\"entityPath\":null,\"wrapperMethod\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "createArchiveEntity",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createArchiveEntity",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createArchiveEntity}",
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"http\": *, \"entityPath\": *, \"wrapperMethod\": *}"
        ],
        "defaultRaw": {
          "http": null,
          "entityPath": null,
          "wrapperMethod": null
        },
        "defaultValue": "{\"http\":null,\"entityPath\":null,\"wrapperMethod\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "createUnarchiveEntity",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createUnarchiveEntity",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createUnarchiveEntity}",
    "description": "",
    "lineNumber": 66,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"http\": *, \"entityPath\": *, \"wrapperMethod\": *}"
        ],
        "defaultRaw": {
          "http": null,
          "entityPath": null,
          "wrapperMethod": null
        },
        "defaultValue": "{\"http\":null,\"entityPath\":null,\"wrapperMethod\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "createPublishedChecker",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createPublishedChecker",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createPublishedChecker}",
    "description": "",
    "lineNumber": 76,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "createUpdatedChecker",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createUpdatedChecker",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createUpdatedChecker}",
    "description": "",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "createDraftChecker",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createDraftChecker",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createDraftChecker}",
    "description": "",
    "lineNumber": 96,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "createArchivedChecker",
    "memberof": "lib/instance-actions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/instance-actions.js~createArchivedChecker",
    "access": "private",
    "export": true,
    "importPath": "contentful-management/lib/instance-actions.js",
    "importStyle": "{createArchivedChecker}",
    "description": "",
    "lineNumber": 105,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]